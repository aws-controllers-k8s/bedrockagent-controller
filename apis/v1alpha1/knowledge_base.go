// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// KnowledgeBaseSpec defines the desired state of KnowledgeBase.
//
// Contains information about a knowledge base.
type KnowledgeBaseSpec struct {

	// A unique, case-sensitive identifier to ensure that the API request completes
	// no more than one time. If this token matches a previous request, Amazon Bedrock
	// ignores the request, but does not return an error. For more information,
	// see Ensuring idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Regex Pattern: `^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,256}$`
	ClientToken *string `json:"clientToken,omitempty"`
	// A description of the knowledge base.
	Description *string `json:"description,omitempty"`
	// Contains details about the embeddings model used for the knowledge base.
	// +kubebuilder:validation:Required
	KnowledgeBaseConfiguration *KnowledgeBaseConfiguration `json:"knowledgeBaseConfiguration"`
	// A name for the knowledge base.
	//
	// Regex Pattern: `^([0-9a-zA-Z][_-]?){1,100}$`
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// The Amazon Resource Name (ARN) of the IAM role with permissions to invoke
	// API operations on the knowledge base.
	//
	// Regex Pattern: `^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$`
	// +kubebuilder:validation:Required
	RoleARN *string `json:"roleARN"`
	// Contains details about the configuration of the vector database used for
	// the knowledge base.
	// +kubebuilder:validation:Required
	StorageConfiguration *StorageConfiguration `json:"storageConfiguration"`
	// An object containing key-value pairs that define the tags to attach to the
	// resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// KnowledgeBaseStatus defines the observed state of KnowledgeBase
type KnowledgeBaseStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The time the knowledge base was created.
	// +kubebuilder:validation:Optional
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// A list of reasons that the API operation on the knowledge base failed.
	// +kubebuilder:validation:Optional
	FailureReasons []*string `json:"failureReasons,omitempty"`
	// The unique identifier of the knowledge base.
	//
	// Regex Pattern: `^[0-9a-zA-Z]{10}$`
	// +kubebuilder:validation:Optional
	KnowledgeBaseID *string `json:"knowledgeBaseID,omitempty"`
	// The status of the knowledge base. The following statuses are possible:
	//
	//    * CREATING – The knowledge base is being created.
	//
	//    * ACTIVE – The knowledge base is ready to be queried.
	//
	//    * DELETING – The knowledge base is being deleted.
	//
	//    * UPDATING – The knowledge base is being updated.
	//
	//    * FAILED – The knowledge base API operation failed.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
	// The time the knowledge base was last updated.
	// +kubebuilder:validation:Optional
	UpdatedAt *metav1.Time `json:"updatedAt,omitempty"`
}

// KnowledgeBase is the Schema for the KnowledgeBases API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type KnowledgeBase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KnowledgeBaseSpec   `json:"spec,omitempty"`
	Status            KnowledgeBaseStatus `json:"status,omitempty"`
}

// KnowledgeBaseList contains a list of KnowledgeBase
// +kubebuilder:object:root=true
type KnowledgeBaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KnowledgeBase `json:"items"`
}

func init() {
	SchemeBuilder.Register(&KnowledgeBase{}, &KnowledgeBaseList{})
}
