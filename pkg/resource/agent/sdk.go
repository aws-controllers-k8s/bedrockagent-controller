// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package agent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/bedrockagent/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/bedrockagent-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Agent{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetAgentOutput
	resp, err = rm.sdkapi.GetAgent(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetAgent", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Agent.AgentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Agent.AgentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Agent.AgentCollaboration != "" {
		ko.Spec.AgentCollaboration = aws.String(string(resp.Agent.AgentCollaboration))
	} else {
		ko.Spec.AgentCollaboration = nil
	}
	if resp.Agent.AgentId != nil {
		ko.Status.AgentID = resp.Agent.AgentId
	} else {
		ko.Status.AgentID = nil
	}
	if resp.Agent.AgentName != nil {
		ko.Spec.AgentName = resp.Agent.AgentName
	} else {
		ko.Spec.AgentName = nil
	}
	if resp.Agent.AgentResourceRoleArn != nil {
		ko.Spec.AgentResourceRoleARN = resp.Agent.AgentResourceRoleArn
	} else {
		ko.Spec.AgentResourceRoleARN = nil
	}
	if resp.Agent.AgentStatus != "" {
		ko.Status.AgentStatus = aws.String(string(resp.Agent.AgentStatus))
	} else {
		ko.Status.AgentStatus = nil
	}
	if resp.Agent.AgentVersion != nil {
		ko.Status.AgentVersion = resp.Agent.AgentVersion
	} else {
		ko.Status.AgentVersion = nil
	}
	if resp.Agent.ClientToken != nil {
		ko.Status.ClientToken = resp.Agent.ClientToken
	} else {
		ko.Status.ClientToken = nil
	}
	if resp.Agent.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Agent.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Agent.CustomOrchestration != nil {
		f9 := &svcapitypes.CustomOrchestration{}
		if resp.Agent.CustomOrchestration.Executor != nil {
			f9f0 := &svcapitypes.OrchestrationExecutor{}
			switch resp.Agent.CustomOrchestration.Executor.(type) {
			case *svcsdktypes.OrchestrationExecutorMemberLambda:
				f9f0f0 := resp.Agent.CustomOrchestration.Executor.(*svcsdktypes.OrchestrationExecutorMemberLambda)
				if f9f0f0 != nil {
					f9f0.Lambda = &f9f0f0.Value
				}
			}
			f9.Executor = f9f0
		}
		ko.Spec.CustomOrchestration = f9
	} else {
		ko.Spec.CustomOrchestration = nil
	}
	if resp.Agent.CustomerEncryptionKeyArn != nil {
		ko.Spec.CustomerEncryptionKeyARN = resp.Agent.CustomerEncryptionKeyArn
	} else {
		ko.Spec.CustomerEncryptionKeyARN = nil
	}
	if resp.Agent.Description != nil {
		ko.Spec.Description = resp.Agent.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Agent.FailureReasons != nil {
		ko.Status.FailureReasons = aws.StringSlice(resp.Agent.FailureReasons)
	} else {
		ko.Status.FailureReasons = nil
	}
	if resp.Agent.FoundationModel != nil {
		ko.Spec.FoundationModel = resp.Agent.FoundationModel
	} else {
		ko.Spec.FoundationModel = nil
	}
	if resp.Agent.GuardrailConfiguration != nil {
		f14 := &svcapitypes.GuardrailConfiguration{}
		if resp.Agent.GuardrailConfiguration.GuardrailIdentifier != nil {
			f14.GuardrailIdentifier = resp.Agent.GuardrailConfiguration.GuardrailIdentifier
		}
		if resp.Agent.GuardrailConfiguration.GuardrailVersion != nil {
			f14.GuardrailVersion = resp.Agent.GuardrailConfiguration.GuardrailVersion
		}
		ko.Spec.GuardrailConfiguration = f14
	} else {
		ko.Spec.GuardrailConfiguration = nil
	}
	if resp.Agent.IdleSessionTTLInSeconds != nil {
		idleSessionTTLInSecondsCopy := int64(*resp.Agent.IdleSessionTTLInSeconds)
		ko.Spec.IdleSessionTTLInSeconds = &idleSessionTTLInSecondsCopy
	} else {
		ko.Spec.IdleSessionTTLInSeconds = nil
	}
	if resp.Agent.Instruction != nil {
		ko.Spec.Instruction = resp.Agent.Instruction
	} else {
		ko.Spec.Instruction = nil
	}
	if resp.Agent.MemoryConfiguration != nil {
		f17 := &svcapitypes.MemoryConfiguration{}
		if resp.Agent.MemoryConfiguration.EnabledMemoryTypes != nil {
			f17f0 := []*string{}
			for _, f17f0iter := range resp.Agent.MemoryConfiguration.EnabledMemoryTypes {
				var f17f0elem *string
				f17f0elem = aws.String(string(f17f0iter))
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.EnabledMemoryTypes = f17f0
		}
		if resp.Agent.MemoryConfiguration.SessionSummaryConfiguration != nil {
			f17f1 := &svcapitypes.SessionSummaryConfiguration{}
			if resp.Agent.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != nil {
				maxRecentSessionsCopy := int64(*resp.Agent.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions)
				f17f1.MaxRecentSessions = &maxRecentSessionsCopy
			}
			f17.SessionSummaryConfiguration = f17f1
		}
		if resp.Agent.MemoryConfiguration.StorageDays != nil {
			storageDaysCopy := int64(*resp.Agent.MemoryConfiguration.StorageDays)
			f17.StorageDays = &storageDaysCopy
		}
		ko.Spec.MemoryConfiguration = f17
	} else {
		ko.Spec.MemoryConfiguration = nil
	}
	if resp.Agent.OrchestrationType != "" {
		ko.Spec.OrchestrationType = aws.String(string(resp.Agent.OrchestrationType))
	} else {
		ko.Spec.OrchestrationType = nil
	}
	if resp.Agent.PreparedAt != nil {
		ko.Status.PreparedAt = &metav1.Time{*resp.Agent.PreparedAt}
	} else {
		ko.Status.PreparedAt = nil
	}
	if resp.Agent.PromptOverrideConfiguration != nil {
		f20 := &svcapitypes.PromptOverrideConfiguration{}
		if resp.Agent.PromptOverrideConfiguration.OverrideLambda != nil {
			f20.OverrideLambda = resp.Agent.PromptOverrideConfiguration.OverrideLambda
		}
		if resp.Agent.PromptOverrideConfiguration.PromptConfigurations != nil {
			f20f1 := []*svcapitypes.PromptConfiguration{}
			for _, f20f1iter := range resp.Agent.PromptOverrideConfiguration.PromptConfigurations {
				f20f1elem := &svcapitypes.PromptConfiguration{}
				if f20f1iter.BasePromptTemplate != nil {
					f20f1elem.BasePromptTemplate = f20f1iter.BasePromptTemplate
				}
				if f20f1iter.FoundationModel != nil {
					f20f1elem.FoundationModel = f20f1iter.FoundationModel
				}
				if f20f1iter.InferenceConfiguration != nil {
					f20f1elemf2 := &svcapitypes.InferenceConfiguration{}
					if f20f1iter.InferenceConfiguration.MaximumLength != nil {
						maximumLengthCopy := int64(*f20f1iter.InferenceConfiguration.MaximumLength)
						f20f1elemf2.MaximumLength = &maximumLengthCopy
					}
					if f20f1iter.InferenceConfiguration.StopSequences != nil {
						f20f1elemf2.StopSequences = aws.StringSlice(f20f1iter.InferenceConfiguration.StopSequences)
					}
					if f20f1iter.InferenceConfiguration.Temperature != nil {
						temperatureCopy := float64(*f20f1iter.InferenceConfiguration.Temperature)
						f20f1elemf2.Temperature = &temperatureCopy
					}
					if f20f1iter.InferenceConfiguration.TopK != nil {
						topKCopy := int64(*f20f1iter.InferenceConfiguration.TopK)
						f20f1elemf2.TopK = &topKCopy
					}
					if f20f1iter.InferenceConfiguration.TopP != nil {
						topPCopy := float64(*f20f1iter.InferenceConfiguration.TopP)
						f20f1elemf2.TopP = &topPCopy
					}
					f20f1elem.InferenceConfiguration = f20f1elemf2
				}
				if f20f1iter.ParserMode != "" {
					f20f1elem.ParserMode = aws.String(string(f20f1iter.ParserMode))
				}
				if f20f1iter.PromptCreationMode != "" {
					f20f1elem.PromptCreationMode = aws.String(string(f20f1iter.PromptCreationMode))
				}
				if f20f1iter.PromptState != "" {
					f20f1elem.PromptState = aws.String(string(f20f1iter.PromptState))
				}
				if f20f1iter.PromptType != "" {
					f20f1elem.PromptType = aws.String(string(f20f1iter.PromptType))
				}
				f20f1 = append(f20f1, f20f1elem)
			}
			f20.PromptConfigurations = f20f1
		}
		ko.Spec.PromptOverrideConfiguration = f20
	} else {
		ko.Spec.PromptOverrideConfiguration = nil
	}
	if resp.Agent.RecommendedActions != nil {
		ko.Status.RecommendedActions = aws.StringSlice(resp.Agent.RecommendedActions)
	} else {
		ko.Status.RecommendedActions = nil
	}
	if resp.Agent.UpdatedAt != nil {
		ko.Status.UpdatedAt = &metav1.Time{*resp.Agent.UpdatedAt}
	} else {
		ko.Status.UpdatedAt = nil
	}

	rm.setStatusDefaults(ko)
	ko.Spec.Tags, err = rm.getTags(ctx, string(*ko.Status.ACKResourceMetadata.ARN))
	if err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.AgentID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetAgentInput, error) {
	res := &svcsdk.GetAgentInput{}

	if r.ko.Status.AgentID != nil {
		res.AgentId = r.ko.Status.AgentID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateAgentOutput
	_ = resp
	resp, err = rm.sdkapi.CreateAgent(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateAgent", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Agent.AgentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Agent.AgentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Agent.AgentCollaboration != "" {
		ko.Spec.AgentCollaboration = aws.String(string(resp.Agent.AgentCollaboration))
	} else {
		ko.Spec.AgentCollaboration = nil
	}
	if resp.Agent.AgentId != nil {
		ko.Status.AgentID = resp.Agent.AgentId
	} else {
		ko.Status.AgentID = nil
	}
	if resp.Agent.AgentName != nil {
		ko.Spec.AgentName = resp.Agent.AgentName
	} else {
		ko.Spec.AgentName = nil
	}
	if resp.Agent.AgentResourceRoleArn != nil {
		ko.Spec.AgentResourceRoleARN = resp.Agent.AgentResourceRoleArn
	} else {
		ko.Spec.AgentResourceRoleARN = nil
	}
	if resp.Agent.AgentStatus != "" {
		ko.Status.AgentStatus = aws.String(string(resp.Agent.AgentStatus))
	} else {
		ko.Status.AgentStatus = nil
	}
	if resp.Agent.AgentVersion != nil {
		ko.Status.AgentVersion = resp.Agent.AgentVersion
	} else {
		ko.Status.AgentVersion = nil
	}
	if resp.Agent.ClientToken != nil {
		ko.Status.ClientToken = resp.Agent.ClientToken
	} else {
		ko.Status.ClientToken = nil
	}
	if resp.Agent.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Agent.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Agent.CustomOrchestration != nil {
		f9 := &svcapitypes.CustomOrchestration{}
		if resp.Agent.CustomOrchestration.Executor != nil {
			f9f0 := &svcapitypes.OrchestrationExecutor{}
			switch resp.Agent.CustomOrchestration.Executor.(type) {
			case *svcsdktypes.OrchestrationExecutorMemberLambda:
				f9f0f0 := resp.Agent.CustomOrchestration.Executor.(*svcsdktypes.OrchestrationExecutorMemberLambda)
				if f9f0f0 != nil {
					f9f0.Lambda = &f9f0f0.Value
				}
			}
			f9.Executor = f9f0
		}
		ko.Spec.CustomOrchestration = f9
	} else {
		ko.Spec.CustomOrchestration = nil
	}
	if resp.Agent.CustomerEncryptionKeyArn != nil {
		ko.Spec.CustomerEncryptionKeyARN = resp.Agent.CustomerEncryptionKeyArn
	} else {
		ko.Spec.CustomerEncryptionKeyARN = nil
	}
	if resp.Agent.Description != nil {
		ko.Spec.Description = resp.Agent.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Agent.FailureReasons != nil {
		ko.Status.FailureReasons = aws.StringSlice(resp.Agent.FailureReasons)
	} else {
		ko.Status.FailureReasons = nil
	}
	if resp.Agent.FoundationModel != nil {
		ko.Spec.FoundationModel = resp.Agent.FoundationModel
	} else {
		ko.Spec.FoundationModel = nil
	}
	if resp.Agent.GuardrailConfiguration != nil {
		f14 := &svcapitypes.GuardrailConfiguration{}
		if resp.Agent.GuardrailConfiguration.GuardrailIdentifier != nil {
			f14.GuardrailIdentifier = resp.Agent.GuardrailConfiguration.GuardrailIdentifier
		}
		if resp.Agent.GuardrailConfiguration.GuardrailVersion != nil {
			f14.GuardrailVersion = resp.Agent.GuardrailConfiguration.GuardrailVersion
		}
		ko.Spec.GuardrailConfiguration = f14
	} else {
		ko.Spec.GuardrailConfiguration = nil
	}
	if resp.Agent.IdleSessionTTLInSeconds != nil {
		idleSessionTTLInSecondsCopy := int64(*resp.Agent.IdleSessionTTLInSeconds)
		ko.Spec.IdleSessionTTLInSeconds = &idleSessionTTLInSecondsCopy
	} else {
		ko.Spec.IdleSessionTTLInSeconds = nil
	}
	if resp.Agent.Instruction != nil {
		ko.Spec.Instruction = resp.Agent.Instruction
	} else {
		ko.Spec.Instruction = nil
	}
	if resp.Agent.MemoryConfiguration != nil {
		f17 := &svcapitypes.MemoryConfiguration{}
		if resp.Agent.MemoryConfiguration.EnabledMemoryTypes != nil {
			f17f0 := []*string{}
			for _, f17f0iter := range resp.Agent.MemoryConfiguration.EnabledMemoryTypes {
				var f17f0elem *string
				f17f0elem = aws.String(string(f17f0iter))
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.EnabledMemoryTypes = f17f0
		}
		if resp.Agent.MemoryConfiguration.SessionSummaryConfiguration != nil {
			f17f1 := &svcapitypes.SessionSummaryConfiguration{}
			if resp.Agent.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != nil {
				maxRecentSessionsCopy := int64(*resp.Agent.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions)
				f17f1.MaxRecentSessions = &maxRecentSessionsCopy
			}
			f17.SessionSummaryConfiguration = f17f1
		}
		if resp.Agent.MemoryConfiguration.StorageDays != nil {
			storageDaysCopy := int64(*resp.Agent.MemoryConfiguration.StorageDays)
			f17.StorageDays = &storageDaysCopy
		}
		ko.Spec.MemoryConfiguration = f17
	} else {
		ko.Spec.MemoryConfiguration = nil
	}
	if resp.Agent.OrchestrationType != "" {
		ko.Spec.OrchestrationType = aws.String(string(resp.Agent.OrchestrationType))
	} else {
		ko.Spec.OrchestrationType = nil
	}
	if resp.Agent.PreparedAt != nil {
		ko.Status.PreparedAt = &metav1.Time{*resp.Agent.PreparedAt}
	} else {
		ko.Status.PreparedAt = nil
	}
	if resp.Agent.PromptOverrideConfiguration != nil {
		f20 := &svcapitypes.PromptOverrideConfiguration{}
		if resp.Agent.PromptOverrideConfiguration.OverrideLambda != nil {
			f20.OverrideLambda = resp.Agent.PromptOverrideConfiguration.OverrideLambda
		}
		if resp.Agent.PromptOverrideConfiguration.PromptConfigurations != nil {
			f20f1 := []*svcapitypes.PromptConfiguration{}
			for _, f20f1iter := range resp.Agent.PromptOverrideConfiguration.PromptConfigurations {
				f20f1elem := &svcapitypes.PromptConfiguration{}
				if f20f1iter.BasePromptTemplate != nil {
					f20f1elem.BasePromptTemplate = f20f1iter.BasePromptTemplate
				}
				if f20f1iter.FoundationModel != nil {
					f20f1elem.FoundationModel = f20f1iter.FoundationModel
				}
				if f20f1iter.InferenceConfiguration != nil {
					f20f1elemf2 := &svcapitypes.InferenceConfiguration{}
					if f20f1iter.InferenceConfiguration.MaximumLength != nil {
						maximumLengthCopy := int64(*f20f1iter.InferenceConfiguration.MaximumLength)
						f20f1elemf2.MaximumLength = &maximumLengthCopy
					}
					if f20f1iter.InferenceConfiguration.StopSequences != nil {
						f20f1elemf2.StopSequences = aws.StringSlice(f20f1iter.InferenceConfiguration.StopSequences)
					}
					if f20f1iter.InferenceConfiguration.Temperature != nil {
						temperatureCopy := float64(*f20f1iter.InferenceConfiguration.Temperature)
						f20f1elemf2.Temperature = &temperatureCopy
					}
					if f20f1iter.InferenceConfiguration.TopK != nil {
						topKCopy := int64(*f20f1iter.InferenceConfiguration.TopK)
						f20f1elemf2.TopK = &topKCopy
					}
					if f20f1iter.InferenceConfiguration.TopP != nil {
						topPCopy := float64(*f20f1iter.InferenceConfiguration.TopP)
						f20f1elemf2.TopP = &topPCopy
					}
					f20f1elem.InferenceConfiguration = f20f1elemf2
				}
				if f20f1iter.ParserMode != "" {
					f20f1elem.ParserMode = aws.String(string(f20f1iter.ParserMode))
				}
				if f20f1iter.PromptCreationMode != "" {
					f20f1elem.PromptCreationMode = aws.String(string(f20f1iter.PromptCreationMode))
				}
				if f20f1iter.PromptState != "" {
					f20f1elem.PromptState = aws.String(string(f20f1iter.PromptState))
				}
				if f20f1iter.PromptType != "" {
					f20f1elem.PromptType = aws.String(string(f20f1iter.PromptType))
				}
				f20f1 = append(f20f1, f20f1elem)
			}
			f20.PromptConfigurations = f20f1
		}
		ko.Spec.PromptOverrideConfiguration = f20
	} else {
		ko.Spec.PromptOverrideConfiguration = nil
	}
	if resp.Agent.RecommendedActions != nil {
		ko.Status.RecommendedActions = aws.StringSlice(resp.Agent.RecommendedActions)
	} else {
		ko.Status.RecommendedActions = nil
	}
	if resp.Agent.UpdatedAt != nil {
		ko.Status.UpdatedAt = &metav1.Time{*resp.Agent.UpdatedAt}
	} else {
		ko.Status.UpdatedAt = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateAgentInput, error) {
	res := &svcsdk.CreateAgentInput{}

	if r.ko.Spec.AgentCollaboration != nil {
		res.AgentCollaboration = svcsdktypes.AgentCollaboration(*r.ko.Spec.AgentCollaboration)
	}
	if r.ko.Spec.AgentName != nil {
		res.AgentName = r.ko.Spec.AgentName
	}
	if r.ko.Spec.AgentResourceRoleARN != nil {
		res.AgentResourceRoleArn = r.ko.Spec.AgentResourceRoleARN
	}
	if r.ko.Spec.CustomOrchestration != nil {
		f3 := &svcsdktypes.CustomOrchestration{}
		if r.ko.Spec.CustomOrchestration.Executor != nil {
			var f3f0 svcsdktypes.OrchestrationExecutor
			isInterfaceSet := false
			if r.ko.Spec.CustomOrchestration.Executor.Lambda != nil {
				if isInterfaceSet {
					return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for Lambda"))
				}
				f3f0f0Parent := &svcsdktypes.OrchestrationExecutorMemberLambda{}
				f3f0f0Parent.Value = *r.ko.Spec.CustomOrchestration.Executor.Lambda
				f3f0 = f3f0f0Parent
				isInterfaceSet = true
			}
			f3.Executor = f3f0
		}
		res.CustomOrchestration = f3
	}
	if r.ko.Spec.CustomerEncryptionKeyARN != nil {
		res.CustomerEncryptionKeyArn = r.ko.Spec.CustomerEncryptionKeyARN
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.FoundationModel != nil {
		res.FoundationModel = r.ko.Spec.FoundationModel
	}
	if r.ko.Spec.GuardrailConfiguration != nil {
		f7 := &svcsdktypes.GuardrailConfiguration{}
		if r.ko.Spec.GuardrailConfiguration.GuardrailIdentifier != nil {
			f7.GuardrailIdentifier = r.ko.Spec.GuardrailConfiguration.GuardrailIdentifier
		}
		if r.ko.Spec.GuardrailConfiguration.GuardrailVersion != nil {
			f7.GuardrailVersion = r.ko.Spec.GuardrailConfiguration.GuardrailVersion
		}
		res.GuardrailConfiguration = f7
	}
	if r.ko.Spec.IdleSessionTTLInSeconds != nil {
		idleSessionTTLInSecondsCopy0 := *r.ko.Spec.IdleSessionTTLInSeconds
		if idleSessionTTLInSecondsCopy0 > math.MaxInt32 || idleSessionTTLInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field idleSessionTTLInSeconds is of type int32")
		}
		idleSessionTTLInSecondsCopy := int32(idleSessionTTLInSecondsCopy0)
		res.IdleSessionTTLInSeconds = &idleSessionTTLInSecondsCopy
	}
	if r.ko.Spec.Instruction != nil {
		res.Instruction = r.ko.Spec.Instruction
	}
	if r.ko.Spec.MemoryConfiguration != nil {
		f10 := &svcsdktypes.MemoryConfiguration{}
		if r.ko.Spec.MemoryConfiguration.EnabledMemoryTypes != nil {
			f10f0 := []svcsdktypes.MemoryType{}
			for _, f10f0iter := range r.ko.Spec.MemoryConfiguration.EnabledMemoryTypes {
				var f10f0elem string
				f10f0elem = string(*f10f0iter)
				f10f0 = append(f10f0, svcsdktypes.MemoryType(f10f0elem))
			}
			f10.EnabledMemoryTypes = f10f0
		}
		if r.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration != nil {
			f10f1 := &svcsdktypes.SessionSummaryConfiguration{}
			if r.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != nil {
				maxRecentSessionsCopy0 := *r.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions
				if maxRecentSessionsCopy0 > math.MaxInt32 || maxRecentSessionsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field maxRecentSessions is of type int32")
				}
				maxRecentSessionsCopy := int32(maxRecentSessionsCopy0)
				f10f1.MaxRecentSessions = &maxRecentSessionsCopy
			}
			f10.SessionSummaryConfiguration = f10f1
		}
		if r.ko.Spec.MemoryConfiguration.StorageDays != nil {
			storageDaysCopy0 := *r.ko.Spec.MemoryConfiguration.StorageDays
			if storageDaysCopy0 > math.MaxInt32 || storageDaysCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field storageDays is of type int32")
			}
			storageDaysCopy := int32(storageDaysCopy0)
			f10.StorageDays = &storageDaysCopy
		}
		res.MemoryConfiguration = f10
	}
	if r.ko.Spec.OrchestrationType != nil {
		res.OrchestrationType = svcsdktypes.OrchestrationType(*r.ko.Spec.OrchestrationType)
	}
	if r.ko.Spec.PromptOverrideConfiguration != nil {
		f12 := &svcsdktypes.PromptOverrideConfiguration{}
		if r.ko.Spec.PromptOverrideConfiguration.OverrideLambda != nil {
			f12.OverrideLambda = r.ko.Spec.PromptOverrideConfiguration.OverrideLambda
		}
		if r.ko.Spec.PromptOverrideConfiguration.PromptConfigurations != nil {
			f12f1 := []svcsdktypes.PromptConfiguration{}
			for _, f12f1iter := range r.ko.Spec.PromptOverrideConfiguration.PromptConfigurations {
				f12f1elem := &svcsdktypes.PromptConfiguration{}
				if f12f1iter.BasePromptTemplate != nil {
					f12f1elem.BasePromptTemplate = f12f1iter.BasePromptTemplate
				}
				if f12f1iter.FoundationModel != nil {
					f12f1elem.FoundationModel = f12f1iter.FoundationModel
				}
				if f12f1iter.InferenceConfiguration != nil {
					f12f1elemf2 := &svcsdktypes.InferenceConfiguration{}
					if f12f1iter.InferenceConfiguration.MaximumLength != nil {
						maximumLengthCopy0 := *f12f1iter.InferenceConfiguration.MaximumLength
						if maximumLengthCopy0 > math.MaxInt32 || maximumLengthCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field maximumLength is of type int32")
						}
						maximumLengthCopy := int32(maximumLengthCopy0)
						f12f1elemf2.MaximumLength = &maximumLengthCopy
					}
					if f12f1iter.InferenceConfiguration.StopSequences != nil {
						f12f1elemf2.StopSequences = aws.ToStringSlice(f12f1iter.InferenceConfiguration.StopSequences)
					}
					if f12f1iter.InferenceConfiguration.Temperature != nil {
						temperatureCopy0 := *f12f1iter.InferenceConfiguration.Temperature
						if temperatureCopy0 > math.MaxFloat32 || temperatureCopy0 < -math.MaxFloat32 || (temperatureCopy0 < math.SmallestNonzeroFloat32 && !(temperatureCopy0 <= 0)) || (temperatureCopy0 > -math.SmallestNonzeroFloat32 && !(temperatureCopy0 >= 0)) {
							return nil, fmt.Errorf("error: field temperature is of type float32")
						}
						temperatureCopy := float32(temperatureCopy0)
						f12f1elemf2.Temperature = &temperatureCopy
					}
					if f12f1iter.InferenceConfiguration.TopK != nil {
						topKCopy0 := *f12f1iter.InferenceConfiguration.TopK
						if topKCopy0 > math.MaxInt32 || topKCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field topK is of type int32")
						}
						topKCopy := int32(topKCopy0)
						f12f1elemf2.TopK = &topKCopy
					}
					if f12f1iter.InferenceConfiguration.TopP != nil {
						topPCopy0 := *f12f1iter.InferenceConfiguration.TopP
						if topPCopy0 > math.MaxFloat32 || topPCopy0 < -math.MaxFloat32 || (topPCopy0 < math.SmallestNonzeroFloat32 && !(topPCopy0 <= 0)) || (topPCopy0 > -math.SmallestNonzeroFloat32 && !(topPCopy0 >= 0)) {
							return nil, fmt.Errorf("error: field topP is of type float32")
						}
						topPCopy := float32(topPCopy0)
						f12f1elemf2.TopP = &topPCopy
					}
					f12f1elem.InferenceConfiguration = f12f1elemf2
				}
				if f12f1iter.ParserMode != nil {
					f12f1elem.ParserMode = svcsdktypes.CreationMode(*f12f1iter.ParserMode)
				}
				if f12f1iter.PromptCreationMode != nil {
					f12f1elem.PromptCreationMode = svcsdktypes.CreationMode(*f12f1iter.PromptCreationMode)
				}
				if f12f1iter.PromptState != nil {
					f12f1elem.PromptState = svcsdktypes.PromptState(*f12f1iter.PromptState)
				}
				if f12f1iter.PromptType != nil {
					f12f1elem.PromptType = svcsdktypes.PromptType(*f12f1iter.PromptType)
				}
				f12f1 = append(f12f1, *f12f1elem)
			}
			f12.PromptConfigurations = f12f1
		}
		res.PromptOverrideConfiguration = f12
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	// If AgentStatus is not in PREPARED state we need to call PrepareAgent to finalize setup
	// of Agent. Uses hack (see delta.go) to trigger update from non-existent Spec.AgentStatus
	if delta.DifferentAt("Spec.AgentStatus") {
		err = prepareAgent(ctx, rm.sdkapi, rm.metrics, *desired.ko.Status.AgentID)
		if err != nil {
			return nil, err
		}
	}

	if delta.DifferentAt("Spec.Tags") {
		err := rm.syncTags(
			ctx,
			desired,
			latest,
		)
		if err != nil {
			return nil, err
		}
	}

	if !delta.DifferentExcept("Spec.AgentStatus", "Spec.Tags") {
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateAgentOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateAgent(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateAgent", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Agent.AgentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Agent.AgentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Agent.AgentCollaboration != "" {
		ko.Spec.AgentCollaboration = aws.String(string(resp.Agent.AgentCollaboration))
	} else {
		ko.Spec.AgentCollaboration = nil
	}
	if resp.Agent.AgentId != nil {
		ko.Status.AgentID = resp.Agent.AgentId
	} else {
		ko.Status.AgentID = nil
	}
	if resp.Agent.AgentName != nil {
		ko.Spec.AgentName = resp.Agent.AgentName
	} else {
		ko.Spec.AgentName = nil
	}
	if resp.Agent.AgentResourceRoleArn != nil {
		ko.Spec.AgentResourceRoleARN = resp.Agent.AgentResourceRoleArn
	} else {
		ko.Spec.AgentResourceRoleARN = nil
	}
	if resp.Agent.AgentStatus != "" {
		ko.Status.AgentStatus = aws.String(string(resp.Agent.AgentStatus))
	} else {
		ko.Status.AgentStatus = nil
	}
	if resp.Agent.AgentVersion != nil {
		ko.Status.AgentVersion = resp.Agent.AgentVersion
	} else {
		ko.Status.AgentVersion = nil
	}
	if resp.Agent.ClientToken != nil {
		ko.Status.ClientToken = resp.Agent.ClientToken
	} else {
		ko.Status.ClientToken = nil
	}
	if resp.Agent.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Agent.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Agent.CustomOrchestration != nil {
		f9 := &svcapitypes.CustomOrchestration{}
		if resp.Agent.CustomOrchestration.Executor != nil {
			f9f0 := &svcapitypes.OrchestrationExecutor{}
			switch resp.Agent.CustomOrchestration.Executor.(type) {
			case *svcsdktypes.OrchestrationExecutorMemberLambda:
				f9f0f0 := resp.Agent.CustomOrchestration.Executor.(*svcsdktypes.OrchestrationExecutorMemberLambda)
				if f9f0f0 != nil {
					f9f0.Lambda = &f9f0f0.Value
				}
			}
			f9.Executor = f9f0
		}
		ko.Spec.CustomOrchestration = f9
	} else {
		ko.Spec.CustomOrchestration = nil
	}
	if resp.Agent.CustomerEncryptionKeyArn != nil {
		ko.Spec.CustomerEncryptionKeyARN = resp.Agent.CustomerEncryptionKeyArn
	} else {
		ko.Spec.CustomerEncryptionKeyARN = nil
	}
	if resp.Agent.Description != nil {
		ko.Spec.Description = resp.Agent.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Agent.FailureReasons != nil {
		ko.Status.FailureReasons = aws.StringSlice(resp.Agent.FailureReasons)
	} else {
		ko.Status.FailureReasons = nil
	}
	if resp.Agent.FoundationModel != nil {
		ko.Spec.FoundationModel = resp.Agent.FoundationModel
	} else {
		ko.Spec.FoundationModel = nil
	}
	if resp.Agent.GuardrailConfiguration != nil {
		f14 := &svcapitypes.GuardrailConfiguration{}
		if resp.Agent.GuardrailConfiguration.GuardrailIdentifier != nil {
			f14.GuardrailIdentifier = resp.Agent.GuardrailConfiguration.GuardrailIdentifier
		}
		if resp.Agent.GuardrailConfiguration.GuardrailVersion != nil {
			f14.GuardrailVersion = resp.Agent.GuardrailConfiguration.GuardrailVersion
		}
		ko.Spec.GuardrailConfiguration = f14
	} else {
		ko.Spec.GuardrailConfiguration = nil
	}
	if resp.Agent.IdleSessionTTLInSeconds != nil {
		idleSessionTTLInSecondsCopy := int64(*resp.Agent.IdleSessionTTLInSeconds)
		ko.Spec.IdleSessionTTLInSeconds = &idleSessionTTLInSecondsCopy
	} else {
		ko.Spec.IdleSessionTTLInSeconds = nil
	}
	if resp.Agent.Instruction != nil {
		ko.Spec.Instruction = resp.Agent.Instruction
	} else {
		ko.Spec.Instruction = nil
	}
	if resp.Agent.MemoryConfiguration != nil {
		f17 := &svcapitypes.MemoryConfiguration{}
		if resp.Agent.MemoryConfiguration.EnabledMemoryTypes != nil {
			f17f0 := []*string{}
			for _, f17f0iter := range resp.Agent.MemoryConfiguration.EnabledMemoryTypes {
				var f17f0elem *string
				f17f0elem = aws.String(string(f17f0iter))
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.EnabledMemoryTypes = f17f0
		}
		if resp.Agent.MemoryConfiguration.SessionSummaryConfiguration != nil {
			f17f1 := &svcapitypes.SessionSummaryConfiguration{}
			if resp.Agent.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != nil {
				maxRecentSessionsCopy := int64(*resp.Agent.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions)
				f17f1.MaxRecentSessions = &maxRecentSessionsCopy
			}
			f17.SessionSummaryConfiguration = f17f1
		}
		if resp.Agent.MemoryConfiguration.StorageDays != nil {
			storageDaysCopy := int64(*resp.Agent.MemoryConfiguration.StorageDays)
			f17.StorageDays = &storageDaysCopy
		}
		ko.Spec.MemoryConfiguration = f17
	} else {
		ko.Spec.MemoryConfiguration = nil
	}
	if resp.Agent.OrchestrationType != "" {
		ko.Spec.OrchestrationType = aws.String(string(resp.Agent.OrchestrationType))
	} else {
		ko.Spec.OrchestrationType = nil
	}
	if resp.Agent.PreparedAt != nil {
		ko.Status.PreparedAt = &metav1.Time{*resp.Agent.PreparedAt}
	} else {
		ko.Status.PreparedAt = nil
	}
	if resp.Agent.PromptOverrideConfiguration != nil {
		f20 := &svcapitypes.PromptOverrideConfiguration{}
		if resp.Agent.PromptOverrideConfiguration.OverrideLambda != nil {
			f20.OverrideLambda = resp.Agent.PromptOverrideConfiguration.OverrideLambda
		}
		if resp.Agent.PromptOverrideConfiguration.PromptConfigurations != nil {
			f20f1 := []*svcapitypes.PromptConfiguration{}
			for _, f20f1iter := range resp.Agent.PromptOverrideConfiguration.PromptConfigurations {
				f20f1elem := &svcapitypes.PromptConfiguration{}
				if f20f1iter.BasePromptTemplate != nil {
					f20f1elem.BasePromptTemplate = f20f1iter.BasePromptTemplate
				}
				if f20f1iter.FoundationModel != nil {
					f20f1elem.FoundationModel = f20f1iter.FoundationModel
				}
				if f20f1iter.InferenceConfiguration != nil {
					f20f1elemf2 := &svcapitypes.InferenceConfiguration{}
					if f20f1iter.InferenceConfiguration.MaximumLength != nil {
						maximumLengthCopy := int64(*f20f1iter.InferenceConfiguration.MaximumLength)
						f20f1elemf2.MaximumLength = &maximumLengthCopy
					}
					if f20f1iter.InferenceConfiguration.StopSequences != nil {
						f20f1elemf2.StopSequences = aws.StringSlice(f20f1iter.InferenceConfiguration.StopSequences)
					}
					if f20f1iter.InferenceConfiguration.Temperature != nil {
						temperatureCopy := float64(*f20f1iter.InferenceConfiguration.Temperature)
						f20f1elemf2.Temperature = &temperatureCopy
					}
					if f20f1iter.InferenceConfiguration.TopK != nil {
						topKCopy := int64(*f20f1iter.InferenceConfiguration.TopK)
						f20f1elemf2.TopK = &topKCopy
					}
					if f20f1iter.InferenceConfiguration.TopP != nil {
						topPCopy := float64(*f20f1iter.InferenceConfiguration.TopP)
						f20f1elemf2.TopP = &topPCopy
					}
					f20f1elem.InferenceConfiguration = f20f1elemf2
				}
				if f20f1iter.ParserMode != "" {
					f20f1elem.ParserMode = aws.String(string(f20f1iter.ParserMode))
				}
				if f20f1iter.PromptCreationMode != "" {
					f20f1elem.PromptCreationMode = aws.String(string(f20f1iter.PromptCreationMode))
				}
				if f20f1iter.PromptState != "" {
					f20f1elem.PromptState = aws.String(string(f20f1iter.PromptState))
				}
				if f20f1iter.PromptType != "" {
					f20f1elem.PromptType = aws.String(string(f20f1iter.PromptType))
				}
				f20f1 = append(f20f1, f20f1elem)
			}
			f20.PromptConfigurations = f20f1
		}
		ko.Spec.PromptOverrideConfiguration = f20
	} else {
		ko.Spec.PromptOverrideConfiguration = nil
	}
	if resp.Agent.RecommendedActions != nil {
		ko.Status.RecommendedActions = aws.StringSlice(resp.Agent.RecommendedActions)
	} else {
		ko.Status.RecommendedActions = nil
	}
	if resp.Agent.UpdatedAt != nil {
		ko.Status.UpdatedAt = &metav1.Time{*resp.Agent.UpdatedAt}
	} else {
		ko.Status.UpdatedAt = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateAgentInput, error) {
	res := &svcsdk.UpdateAgentInput{}

	if r.ko.Spec.AgentCollaboration != nil {
		res.AgentCollaboration = svcsdktypes.AgentCollaboration(*r.ko.Spec.AgentCollaboration)
	}
	if r.ko.Status.AgentID != nil {
		res.AgentId = r.ko.Status.AgentID
	}
	if r.ko.Spec.AgentName != nil {
		res.AgentName = r.ko.Spec.AgentName
	}
	if r.ko.Spec.AgentResourceRoleARN != nil {
		res.AgentResourceRoleArn = r.ko.Spec.AgentResourceRoleARN
	}
	if r.ko.Spec.CustomOrchestration != nil {
		f4 := &svcsdktypes.CustomOrchestration{}
		if r.ko.Spec.CustomOrchestration.Executor != nil {
			var f4f0 svcsdktypes.OrchestrationExecutor
			isInterfaceSet := false
			if r.ko.Spec.CustomOrchestration.Executor.Lambda != nil {
				if isInterfaceSet {
					return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for Lambda"))
				}
				f4f0f0Parent := &svcsdktypes.OrchestrationExecutorMemberLambda{}
				f4f0f0Parent.Value = *r.ko.Spec.CustomOrchestration.Executor.Lambda
				f4f0 = f4f0f0Parent
				isInterfaceSet = true
			}
			f4.Executor = f4f0
		}
		res.CustomOrchestration = f4
	}
	if r.ko.Spec.CustomerEncryptionKeyARN != nil {
		res.CustomerEncryptionKeyArn = r.ko.Spec.CustomerEncryptionKeyARN
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.FoundationModel != nil {
		res.FoundationModel = r.ko.Spec.FoundationModel
	}
	if r.ko.Spec.GuardrailConfiguration != nil {
		f8 := &svcsdktypes.GuardrailConfiguration{}
		if r.ko.Spec.GuardrailConfiguration.GuardrailIdentifier != nil {
			f8.GuardrailIdentifier = r.ko.Spec.GuardrailConfiguration.GuardrailIdentifier
		}
		if r.ko.Spec.GuardrailConfiguration.GuardrailVersion != nil {
			f8.GuardrailVersion = r.ko.Spec.GuardrailConfiguration.GuardrailVersion
		}
		res.GuardrailConfiguration = f8
	}
	if r.ko.Spec.IdleSessionTTLInSeconds != nil {
		idleSessionTTLInSecondsCopy0 := *r.ko.Spec.IdleSessionTTLInSeconds
		if idleSessionTTLInSecondsCopy0 > math.MaxInt32 || idleSessionTTLInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field idleSessionTTLInSeconds is of type int32")
		}
		idleSessionTTLInSecondsCopy := int32(idleSessionTTLInSecondsCopy0)
		res.IdleSessionTTLInSeconds = &idleSessionTTLInSecondsCopy
	}
	if r.ko.Spec.Instruction != nil {
		res.Instruction = r.ko.Spec.Instruction
	}
	if r.ko.Spec.MemoryConfiguration != nil {
		f11 := &svcsdktypes.MemoryConfiguration{}
		if r.ko.Spec.MemoryConfiguration.EnabledMemoryTypes != nil {
			f11f0 := []svcsdktypes.MemoryType{}
			for _, f11f0iter := range r.ko.Spec.MemoryConfiguration.EnabledMemoryTypes {
				var f11f0elem string
				f11f0elem = string(*f11f0iter)
				f11f0 = append(f11f0, svcsdktypes.MemoryType(f11f0elem))
			}
			f11.EnabledMemoryTypes = f11f0
		}
		if r.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration != nil {
			f11f1 := &svcsdktypes.SessionSummaryConfiguration{}
			if r.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != nil {
				maxRecentSessionsCopy0 := *r.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions
				if maxRecentSessionsCopy0 > math.MaxInt32 || maxRecentSessionsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field maxRecentSessions is of type int32")
				}
				maxRecentSessionsCopy := int32(maxRecentSessionsCopy0)
				f11f1.MaxRecentSessions = &maxRecentSessionsCopy
			}
			f11.SessionSummaryConfiguration = f11f1
		}
		if r.ko.Spec.MemoryConfiguration.StorageDays != nil {
			storageDaysCopy0 := *r.ko.Spec.MemoryConfiguration.StorageDays
			if storageDaysCopy0 > math.MaxInt32 || storageDaysCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field storageDays is of type int32")
			}
			storageDaysCopy := int32(storageDaysCopy0)
			f11.StorageDays = &storageDaysCopy
		}
		res.MemoryConfiguration = f11
	}
	if r.ko.Spec.OrchestrationType != nil {
		res.OrchestrationType = svcsdktypes.OrchestrationType(*r.ko.Spec.OrchestrationType)
	}
	if r.ko.Spec.PromptOverrideConfiguration != nil {
		f13 := &svcsdktypes.PromptOverrideConfiguration{}
		if r.ko.Spec.PromptOverrideConfiguration.OverrideLambda != nil {
			f13.OverrideLambda = r.ko.Spec.PromptOverrideConfiguration.OverrideLambda
		}
		if r.ko.Spec.PromptOverrideConfiguration.PromptConfigurations != nil {
			f13f1 := []svcsdktypes.PromptConfiguration{}
			for _, f13f1iter := range r.ko.Spec.PromptOverrideConfiguration.PromptConfigurations {
				f13f1elem := &svcsdktypes.PromptConfiguration{}
				if f13f1iter.BasePromptTemplate != nil {
					f13f1elem.BasePromptTemplate = f13f1iter.BasePromptTemplate
				}
				if f13f1iter.FoundationModel != nil {
					f13f1elem.FoundationModel = f13f1iter.FoundationModel
				}
				if f13f1iter.InferenceConfiguration != nil {
					f13f1elemf2 := &svcsdktypes.InferenceConfiguration{}
					if f13f1iter.InferenceConfiguration.MaximumLength != nil {
						maximumLengthCopy0 := *f13f1iter.InferenceConfiguration.MaximumLength
						if maximumLengthCopy0 > math.MaxInt32 || maximumLengthCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field maximumLength is of type int32")
						}
						maximumLengthCopy := int32(maximumLengthCopy0)
						f13f1elemf2.MaximumLength = &maximumLengthCopy
					}
					if f13f1iter.InferenceConfiguration.StopSequences != nil {
						f13f1elemf2.StopSequences = aws.ToStringSlice(f13f1iter.InferenceConfiguration.StopSequences)
					}
					if f13f1iter.InferenceConfiguration.Temperature != nil {
						temperatureCopy0 := *f13f1iter.InferenceConfiguration.Temperature
						if temperatureCopy0 > math.MaxFloat32 || temperatureCopy0 < -math.MaxFloat32 || (temperatureCopy0 < math.SmallestNonzeroFloat32 && !(temperatureCopy0 <= 0)) || (temperatureCopy0 > -math.SmallestNonzeroFloat32 && !(temperatureCopy0 >= 0)) {
							return nil, fmt.Errorf("error: field temperature is of type float32")
						}
						temperatureCopy := float32(temperatureCopy0)
						f13f1elemf2.Temperature = &temperatureCopy
					}
					if f13f1iter.InferenceConfiguration.TopK != nil {
						topKCopy0 := *f13f1iter.InferenceConfiguration.TopK
						if topKCopy0 > math.MaxInt32 || topKCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field topK is of type int32")
						}
						topKCopy := int32(topKCopy0)
						f13f1elemf2.TopK = &topKCopy
					}
					if f13f1iter.InferenceConfiguration.TopP != nil {
						topPCopy0 := *f13f1iter.InferenceConfiguration.TopP
						if topPCopy0 > math.MaxFloat32 || topPCopy0 < -math.MaxFloat32 || (topPCopy0 < math.SmallestNonzeroFloat32 && !(topPCopy0 <= 0)) || (topPCopy0 > -math.SmallestNonzeroFloat32 && !(topPCopy0 >= 0)) {
							return nil, fmt.Errorf("error: field topP is of type float32")
						}
						topPCopy := float32(topPCopy0)
						f13f1elemf2.TopP = &topPCopy
					}
					f13f1elem.InferenceConfiguration = f13f1elemf2
				}
				if f13f1iter.ParserMode != nil {
					f13f1elem.ParserMode = svcsdktypes.CreationMode(*f13f1iter.ParserMode)
				}
				if f13f1iter.PromptCreationMode != nil {
					f13f1elem.PromptCreationMode = svcsdktypes.CreationMode(*f13f1iter.PromptCreationMode)
				}
				if f13f1iter.PromptState != nil {
					f13f1elem.PromptState = svcsdktypes.PromptState(*f13f1iter.PromptState)
				}
				if f13f1iter.PromptType != nil {
					f13f1elem.PromptType = svcsdktypes.PromptType(*f13f1iter.PromptType)
				}
				f13f1 = append(f13f1, *f13f1elem)
			}
			f13.PromptConfigurations = f13f1
		}
		res.PromptOverrideConfiguration = f13
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteAgentOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteAgent(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteAgent", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteAgentInput, error) {
	res := &svcsdk.DeleteAgentInput{}

	if r.ko.Status.AgentID != nil {
		res.AgentId = r.ko.Status.AgentID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Agent,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ValidationException":
		return true
	default:
		return false
	}
}
