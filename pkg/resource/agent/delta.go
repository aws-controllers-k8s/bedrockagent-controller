// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package agent

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	// Hack to ensure that reconcile loop triggers update for PrepareAgent call
	// if AgentStatus is not in PREPARED state.
	compareAgentStatus(delta, b.ko.Status.AgentStatus)

	comparePropertyOverrideConfiguration(delta, a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.AgentCollaboration, b.ko.Spec.AgentCollaboration) {
		delta.Add("Spec.AgentCollaboration", a.ko.Spec.AgentCollaboration, b.ko.Spec.AgentCollaboration)
	} else if a.ko.Spec.AgentCollaboration != nil && b.ko.Spec.AgentCollaboration != nil {
		if *a.ko.Spec.AgentCollaboration != *b.ko.Spec.AgentCollaboration {
			delta.Add("Spec.AgentCollaboration", a.ko.Spec.AgentCollaboration, b.ko.Spec.AgentCollaboration)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AgentName, b.ko.Spec.AgentName) {
		delta.Add("Spec.AgentName", a.ko.Spec.AgentName, b.ko.Spec.AgentName)
	} else if a.ko.Spec.AgentName != nil && b.ko.Spec.AgentName != nil {
		if *a.ko.Spec.AgentName != *b.ko.Spec.AgentName {
			delta.Add("Spec.AgentName", a.ko.Spec.AgentName, b.ko.Spec.AgentName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AgentResourceRoleARN, b.ko.Spec.AgentResourceRoleARN) {
		delta.Add("Spec.AgentResourceRoleARN", a.ko.Spec.AgentResourceRoleARN, b.ko.Spec.AgentResourceRoleARN)
	} else if a.ko.Spec.AgentResourceRoleARN != nil && b.ko.Spec.AgentResourceRoleARN != nil {
		if *a.ko.Spec.AgentResourceRoleARN != *b.ko.Spec.AgentResourceRoleARN {
			delta.Add("Spec.AgentResourceRoleARN", a.ko.Spec.AgentResourceRoleARN, b.ko.Spec.AgentResourceRoleARN)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.AgentResourceRoleRef, b.ko.Spec.AgentResourceRoleRef) {
		delta.Add("Spec.AgentResourceRoleRef", a.ko.Spec.AgentResourceRoleRef, b.ko.Spec.AgentResourceRoleRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CustomOrchestration, b.ko.Spec.CustomOrchestration) {
		delta.Add("Spec.CustomOrchestration", a.ko.Spec.CustomOrchestration, b.ko.Spec.CustomOrchestration)
	} else if a.ko.Spec.CustomOrchestration != nil && b.ko.Spec.CustomOrchestration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.CustomOrchestration.Executor, b.ko.Spec.CustomOrchestration.Executor) {
			delta.Add("Spec.CustomOrchestration.Executor", a.ko.Spec.CustomOrchestration.Executor, b.ko.Spec.CustomOrchestration.Executor)
		} else if a.ko.Spec.CustomOrchestration.Executor != nil && b.ko.Spec.CustomOrchestration.Executor != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.CustomOrchestration.Executor.Lambda, b.ko.Spec.CustomOrchestration.Executor.Lambda) {
				delta.Add("Spec.CustomOrchestration.Executor.Lambda", a.ko.Spec.CustomOrchestration.Executor.Lambda, b.ko.Spec.CustomOrchestration.Executor.Lambda)
			} else if a.ko.Spec.CustomOrchestration.Executor.Lambda != nil && b.ko.Spec.CustomOrchestration.Executor.Lambda != nil {
				if *a.ko.Spec.CustomOrchestration.Executor.Lambda != *b.ko.Spec.CustomOrchestration.Executor.Lambda {
					delta.Add("Spec.CustomOrchestration.Executor.Lambda", a.ko.Spec.CustomOrchestration.Executor.Lambda, b.ko.Spec.CustomOrchestration.Executor.Lambda)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CustomerEncryptionKeyARN, b.ko.Spec.CustomerEncryptionKeyARN) {
		delta.Add("Spec.CustomerEncryptionKeyARN", a.ko.Spec.CustomerEncryptionKeyARN, b.ko.Spec.CustomerEncryptionKeyARN)
	} else if a.ko.Spec.CustomerEncryptionKeyARN != nil && b.ko.Spec.CustomerEncryptionKeyARN != nil {
		if *a.ko.Spec.CustomerEncryptionKeyARN != *b.ko.Spec.CustomerEncryptionKeyARN {
			delta.Add("Spec.CustomerEncryptionKeyARN", a.ko.Spec.CustomerEncryptionKeyARN, b.ko.Spec.CustomerEncryptionKeyARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.FoundationModel, b.ko.Spec.FoundationModel) {
		delta.Add("Spec.FoundationModel", a.ko.Spec.FoundationModel, b.ko.Spec.FoundationModel)
	} else if a.ko.Spec.FoundationModel != nil && b.ko.Spec.FoundationModel != nil {
		if *a.ko.Spec.FoundationModel != *b.ko.Spec.FoundationModel {
			delta.Add("Spec.FoundationModel", a.ko.Spec.FoundationModel, b.ko.Spec.FoundationModel)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.GuardrailConfiguration, b.ko.Spec.GuardrailConfiguration) {
		delta.Add("Spec.GuardrailConfiguration", a.ko.Spec.GuardrailConfiguration, b.ko.Spec.GuardrailConfiguration)
	} else if a.ko.Spec.GuardrailConfiguration != nil && b.ko.Spec.GuardrailConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.GuardrailConfiguration.GuardrailIdentifier, b.ko.Spec.GuardrailConfiguration.GuardrailIdentifier) {
			delta.Add("Spec.GuardrailConfiguration.GuardrailIdentifier", a.ko.Spec.GuardrailConfiguration.GuardrailIdentifier, b.ko.Spec.GuardrailConfiguration.GuardrailIdentifier)
		} else if a.ko.Spec.GuardrailConfiguration.GuardrailIdentifier != nil && b.ko.Spec.GuardrailConfiguration.GuardrailIdentifier != nil {
			if *a.ko.Spec.GuardrailConfiguration.GuardrailIdentifier != *b.ko.Spec.GuardrailConfiguration.GuardrailIdentifier {
				delta.Add("Spec.GuardrailConfiguration.GuardrailIdentifier", a.ko.Spec.GuardrailConfiguration.GuardrailIdentifier, b.ko.Spec.GuardrailConfiguration.GuardrailIdentifier)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.GuardrailConfiguration.GuardrailVersion, b.ko.Spec.GuardrailConfiguration.GuardrailVersion) {
			delta.Add("Spec.GuardrailConfiguration.GuardrailVersion", a.ko.Spec.GuardrailConfiguration.GuardrailVersion, b.ko.Spec.GuardrailConfiguration.GuardrailVersion)
		} else if a.ko.Spec.GuardrailConfiguration.GuardrailVersion != nil && b.ko.Spec.GuardrailConfiguration.GuardrailVersion != nil {
			if *a.ko.Spec.GuardrailConfiguration.GuardrailVersion != *b.ko.Spec.GuardrailConfiguration.GuardrailVersion {
				delta.Add("Spec.GuardrailConfiguration.GuardrailVersion", a.ko.Spec.GuardrailConfiguration.GuardrailVersion, b.ko.Spec.GuardrailConfiguration.GuardrailVersion)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IdleSessionTTLInSeconds, b.ko.Spec.IdleSessionTTLInSeconds) {
		delta.Add("Spec.IdleSessionTTLInSeconds", a.ko.Spec.IdleSessionTTLInSeconds, b.ko.Spec.IdleSessionTTLInSeconds)
	} else if a.ko.Spec.IdleSessionTTLInSeconds != nil && b.ko.Spec.IdleSessionTTLInSeconds != nil {
		if *a.ko.Spec.IdleSessionTTLInSeconds != *b.ko.Spec.IdleSessionTTLInSeconds {
			delta.Add("Spec.IdleSessionTTLInSeconds", a.ko.Spec.IdleSessionTTLInSeconds, b.ko.Spec.IdleSessionTTLInSeconds)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Instruction, b.ko.Spec.Instruction) {
		delta.Add("Spec.Instruction", a.ko.Spec.Instruction, b.ko.Spec.Instruction)
	} else if a.ko.Spec.Instruction != nil && b.ko.Spec.Instruction != nil {
		if *a.ko.Spec.Instruction != *b.ko.Spec.Instruction {
			delta.Add("Spec.Instruction", a.ko.Spec.Instruction, b.ko.Spec.Instruction)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MemoryConfiguration, b.ko.Spec.MemoryConfiguration) {
		delta.Add("Spec.MemoryConfiguration", a.ko.Spec.MemoryConfiguration, b.ko.Spec.MemoryConfiguration)
	} else if a.ko.Spec.MemoryConfiguration != nil && b.ko.Spec.MemoryConfiguration != nil {
		if len(a.ko.Spec.MemoryConfiguration.EnabledMemoryTypes) != len(b.ko.Spec.MemoryConfiguration.EnabledMemoryTypes) {
			delta.Add("Spec.MemoryConfiguration.EnabledMemoryTypes", a.ko.Spec.MemoryConfiguration.EnabledMemoryTypes, b.ko.Spec.MemoryConfiguration.EnabledMemoryTypes)
		} else if len(a.ko.Spec.MemoryConfiguration.EnabledMemoryTypes) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.MemoryConfiguration.EnabledMemoryTypes, b.ko.Spec.MemoryConfiguration.EnabledMemoryTypes) {
				delta.Add("Spec.MemoryConfiguration.EnabledMemoryTypes", a.ko.Spec.MemoryConfiguration.EnabledMemoryTypes, b.ko.Spec.MemoryConfiguration.EnabledMemoryTypes)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration, b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration) {
			delta.Add("Spec.MemoryConfiguration.SessionSummaryConfiguration", a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration, b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration)
		} else if a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration != nil && b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions, b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions) {
				delta.Add("Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions", a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions, b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions)
			} else if a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != nil && b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != nil {
				if *a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions != *b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions {
					delta.Add("Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions", a.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions, b.ko.Spec.MemoryConfiguration.SessionSummaryConfiguration.MaxRecentSessions)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MemoryConfiguration.StorageDays, b.ko.Spec.MemoryConfiguration.StorageDays) {
			delta.Add("Spec.MemoryConfiguration.StorageDays", a.ko.Spec.MemoryConfiguration.StorageDays, b.ko.Spec.MemoryConfiguration.StorageDays)
		} else if a.ko.Spec.MemoryConfiguration.StorageDays != nil && b.ko.Spec.MemoryConfiguration.StorageDays != nil {
			if *a.ko.Spec.MemoryConfiguration.StorageDays != *b.ko.Spec.MemoryConfiguration.StorageDays {
				delta.Add("Spec.MemoryConfiguration.StorageDays", a.ko.Spec.MemoryConfiguration.StorageDays, b.ko.Spec.MemoryConfiguration.StorageDays)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.OrchestrationType, b.ko.Spec.OrchestrationType) {
		delta.Add("Spec.OrchestrationType", a.ko.Spec.OrchestrationType, b.ko.Spec.OrchestrationType)
	} else if a.ko.Spec.OrchestrationType != nil && b.ko.Spec.OrchestrationType != nil {
		if *a.ko.Spec.OrchestrationType != *b.ko.Spec.OrchestrationType {
			delta.Add("Spec.OrchestrationType", a.ko.Spec.OrchestrationType, b.ko.Spec.OrchestrationType)
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
