// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package knowledge_base

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/bedrockagent/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/bedrockagent-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.KnowledgeBase{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetKnowledgeBaseOutput
	resp, err = rm.sdkapi.GetKnowledgeBase(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetKnowledgeBase", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.KnowledgeBase.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.KnowledgeBase.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.KnowledgeBase.Description != nil {
		ko.Spec.Description = resp.KnowledgeBase.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.KnowledgeBase.FailureReasons != nil {
		ko.Status.FailureReasons = aws.StringSlice(resp.KnowledgeBase.FailureReasons)
	} else {
		ko.Status.FailureReasons = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.KnowledgeBase.KnowledgeBaseArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.KnowledgeBase.KnowledgeBaseArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.KnowledgeBase.KnowledgeBaseConfiguration != nil {
		f4 := &svcapitypes.KnowledgeBaseConfiguration{}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration != nil {
			f4f0 := &svcapitypes.KendraKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexArn != nil {
				f4f0.KendraIndexARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexArn
			}
			f4.KendraKnowledgeBaseConfiguration = f4f0
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration != nil {
			f4f1 := &svcapitypes.SQLKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration != nil {
				f4f1f0 := &svcapitypes.RedshiftConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration != nil {
					f4f1f0f0 := &svcapitypes.RedshiftQueryEngineConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration != nil {
						f4f1f0f0f0 := &svcapitypes.RedshiftProvisionedConfiguration{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration != nil {
							f4f1f0f0f0f0 := &svcapitypes.RedshiftProvisionedAuthConfiguration{}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser != nil {
								f4f1f0f0f0f0.DatabaseUser = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type != "" {
								f4f1f0f0f0f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type))
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretArn != nil {
								f4f1f0f0f0f0.UsernamePasswordSecretARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretArn
							}
							f4f1f0f0f0.AuthConfiguration = f4f1f0f0f0f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier != nil {
							f4f1f0f0f0.ClusterIdentifier = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier
						}
						f4f1f0f0.ProvisionedConfiguration = f4f1f0f0f0
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration != nil {
						f4f1f0f0f1 := &svcapitypes.RedshiftServerlessConfiguration{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration != nil {
							f4f1f0f0f1f0 := &svcapitypes.RedshiftServerlessAuthConfiguration{}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type != "" {
								f4f1f0f0f1f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type))
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretArn != nil {
								f4f1f0f0f1f0.UsernamePasswordSecretARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretArn
							}
							f4f1f0f0f1.AuthConfiguration = f4f1f0f0f1f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupArn != nil {
							f4f1f0f0f1.WorkgroupARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupArn
						}
						f4f1f0f0.ServerlessConfiguration = f4f1f0f0f1
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type != "" {
						f4f1f0f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type))
					}
					f4f1f0.QueryEngineConfiguration = f4f1f0f0
				}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration != nil {
					f4f1f0f1 := &svcapitypes.QueryGenerationConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds != nil {
						executionTimeoutSecondsCopy := int64(*resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds)
						f4f1f0f1.ExecutionTimeoutSeconds = &executionTimeoutSecondsCopy
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext != nil {
						f4f1f0f1f1 := &svcapitypes.QueryGenerationContext{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries != nil {
							f4f1f0f1f1f0 := []*svcapitypes.CuratedQuery{}
							for _, f4f1f0f1f1f0iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries {
								f4f1f0f1f1f0elem := &svcapitypes.CuratedQuery{}
								if f4f1f0f1f1f0iter.NaturalLanguage != nil {
									f4f1f0f1f1f0elem.NATuralLanguage = f4f1f0f1f1f0iter.NaturalLanguage
								}
								if f4f1f0f1f1f0iter.Sql != nil {
									f4f1f0f1f1f0elem.SQL = f4f1f0f1f1f0iter.Sql
								}
								f4f1f0f1f1f0 = append(f4f1f0f1f1f0, f4f1f0f1f1f0elem)
							}
							f4f1f0f1f1.CuratedQueries = f4f1f0f1f1f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables != nil {
							f4f1f0f1f1f1 := []*svcapitypes.QueryGenerationTable{}
							for _, f4f1f0f1f1f1iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables {
								f4f1f0f1f1f1elem := &svcapitypes.QueryGenerationTable{}
								if f4f1f0f1f1f1iter.Columns != nil {
									f4f1f0f1f1f1elemf0 := []*svcapitypes.QueryGenerationColumn{}
									for _, f4f1f0f1f1f1elemf0iter := range f4f1f0f1f1f1iter.Columns {
										f4f1f0f1f1f1elemf0elem := &svcapitypes.QueryGenerationColumn{}
										if f4f1f0f1f1f1elemf0iter.Description != nil {
											f4f1f0f1f1f1elemf0elem.Description = f4f1f0f1f1f1elemf0iter.Description
										}
										if f4f1f0f1f1f1elemf0iter.Inclusion != "" {
											f4f1f0f1f1f1elemf0elem.Inclusion = aws.String(string(f4f1f0f1f1f1elemf0iter.Inclusion))
										}
										if f4f1f0f1f1f1elemf0iter.Name != nil {
											f4f1f0f1f1f1elemf0elem.Name = f4f1f0f1f1f1elemf0iter.Name
										}
										f4f1f0f1f1f1elemf0 = append(f4f1f0f1f1f1elemf0, f4f1f0f1f1f1elemf0elem)
									}
									f4f1f0f1f1f1elem.Columns = f4f1f0f1f1f1elemf0
								}
								if f4f1f0f1f1f1iter.Description != nil {
									f4f1f0f1f1f1elem.Description = f4f1f0f1f1f1iter.Description
								}
								if f4f1f0f1f1f1iter.Inclusion != "" {
									f4f1f0f1f1f1elem.Inclusion = aws.String(string(f4f1f0f1f1f1iter.Inclusion))
								}
								if f4f1f0f1f1f1iter.Name != nil {
									f4f1f0f1f1f1elem.Name = f4f1f0f1f1f1iter.Name
								}
								f4f1f0f1f1f1 = append(f4f1f0f1f1f1, f4f1f0f1f1f1elem)
							}
							f4f1f0f1f1.Tables = f4f1f0f1f1f1
						}
						f4f1f0f1.GenerationContext = f4f1f0f1f1
					}
					f4f1f0.QueryGenerationConfiguration = f4f1f0f1
				}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations != nil {
					f4f1f0f2 := []*svcapitypes.RedshiftQueryEngineStorageConfiguration{}
					for _, f4f1f0f2iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations {
						f4f1f0f2elem := &svcapitypes.RedshiftQueryEngineStorageConfiguration{}
						if f4f1f0f2iter.AwsDataCatalogConfiguration != nil {
							f4f1f0f2elemf0 := &svcapitypes.RedshiftQueryEngineAWSDataCatalogStorageConfiguration{}
							if f4f1f0f2iter.AwsDataCatalogConfiguration.TableNames != nil {
								f4f1f0f2elemf0.TableNames = aws.StringSlice(f4f1f0f2iter.AwsDataCatalogConfiguration.TableNames)
							}
							f4f1f0f2elem.AWSDataCatalogConfiguration = f4f1f0f2elemf0
						}
						if f4f1f0f2iter.RedshiftConfiguration != nil {
							f4f1f0f2elemf1 := &svcapitypes.RedshiftQueryEngineRedshiftStorageConfiguration{}
							if f4f1f0f2iter.RedshiftConfiguration.DatabaseName != nil {
								f4f1f0f2elemf1.DatabaseName = f4f1f0f2iter.RedshiftConfiguration.DatabaseName
							}
							f4f1f0f2elem.RedshiftConfiguration = f4f1f0f2elemf1
						}
						if f4f1f0f2iter.Type != "" {
							f4f1f0f2elem.Type = aws.String(string(f4f1f0f2iter.Type))
						}
						f4f1f0f2 = append(f4f1f0f2, f4f1f0f2elem)
					}
					f4f1f0.StorageConfigurations = f4f1f0f2
				}
				f4f1.RedshiftConfiguration = f4f1f0
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.Type != "" {
				f4f1.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.Type))
			}
			f4.SQLKnowledgeBaseConfiguration = f4f1
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.Type != "" {
			f4.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.Type))
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration != nil {
			f4f3 := &svcapitypes.VectorKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelArn != nil {
				f4f3.EmbeddingModelARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelArn
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration != nil {
				f4f3f1 := &svcapitypes.EmbeddingModelConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration != nil {
					f4f3f1f0 := &svcapitypes.BedrockEmbeddingModelConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions != nil {
						dimensionsCopy := int64(*resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions)
						f4f3f1f0.Dimensions = &dimensionsCopy
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType != "" {
						f4f3f1f0.EmbeddingDataType = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType))
					}
					f4f3f1.BedrockEmbeddingModelConfiguration = f4f3f1f0
				}
				f4f3.EmbeddingModelConfiguration = f4f3f1
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration != nil {
				f4f3f2 := &svcapitypes.SupplementalDataStorageConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations != nil {
					f4f3f2f0 := []*svcapitypes.SupplementalDataStorageLocation{}
					for _, f4f3f2f0iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations {
						f4f3f2f0elem := &svcapitypes.SupplementalDataStorageLocation{}
						if f4f3f2f0iter.S3Location != nil {
							f4f3f2f0elemf0 := &svcapitypes.S3Location{}
							if f4f3f2f0iter.S3Location.Uri != nil {
								f4f3f2f0elemf0.URI = f4f3f2f0iter.S3Location.Uri
							}
							f4f3f2f0elem.S3Location = f4f3f2f0elemf0
						}
						if f4f3f2f0iter.Type != "" {
							f4f3f2f0elem.Type = aws.String(string(f4f3f2f0iter.Type))
						}
						f4f3f2f0 = append(f4f3f2f0, f4f3f2f0elem)
					}
					f4f3f2.StorageLocations = f4f3f2f0
				}
				f4f3.SupplementalDataStorageConfiguration = f4f3f2
			}
			f4.VectorKnowledgeBaseConfiguration = f4f3
		}
		ko.Spec.KnowledgeBaseConfiguration = f4
	} else {
		ko.Spec.KnowledgeBaseConfiguration = nil
	}
	if resp.KnowledgeBase.KnowledgeBaseId != nil {
		ko.Status.KnowledgeBaseID = resp.KnowledgeBase.KnowledgeBaseId
	} else {
		ko.Status.KnowledgeBaseID = nil
	}
	if resp.KnowledgeBase.Name != nil {
		ko.Spec.Name = resp.KnowledgeBase.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.KnowledgeBase.RoleArn != nil {
		ko.Spec.RoleARN = resp.KnowledgeBase.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.KnowledgeBase.Status != "" {
		ko.Status.Status = aws.String(string(resp.KnowledgeBase.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.KnowledgeBase.StorageConfiguration != nil {
		f9 := &svcapitypes.StorageConfiguration{}
		if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration != nil {
			f9f0 := &svcapitypes.MongoDBAtlasConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CollectionName != nil {
				f9f0.CollectionName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CollectionName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CredentialsSecretArn != nil {
				f9f0.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.DatabaseName != nil {
				f9f0.DatabaseName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.DatabaseName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.Endpoint != nil {
				f9f0.Endpoint = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.Endpoint
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.EndpointServiceName != nil {
				f9f0.EndpointServiceName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.EndpointServiceName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping != nil {
				f9f0f5 := &svcapitypes.MongoDBAtlasFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.MetadataField != nil {
					f9f0f5.MetadataField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.TextField != nil {
					f9f0f5.TextField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.VectorField != nil {
					f9f0f5.VectorField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.VectorField
				}
				f9f0.FieldMapping = f9f0f5
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.VectorIndexName != nil {
				f9f0.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.VectorIndexName
			}
			f9.MongoDBAtlasConfiguration = f9f0
		}
		if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration != nil {
			f9f1 := &svcapitypes.OpenSearchServerlessConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.CollectionArn != nil {
				f9f1.CollectionARN = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.CollectionArn
			}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping != nil {
				f9f1f1 := &svcapitypes.OpenSearchServerlessFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField != nil {
					f9f1f1.MetadataField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField != nil {
					f9f1f1.TextField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField != nil {
					f9f1f1.VectorField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField
				}
				f9f1.FieldMapping = f9f1f1
			}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName != nil {
				f9f1.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName
			}
			f9.OpensearchServerlessConfiguration = f9f1
		}
		if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration != nil {
			f9f2 := &svcapitypes.PineconeConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.ConnectionString != nil {
				f9f2.ConnectionString = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.ConnectionString
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.CredentialsSecretArn != nil {
				f9f2.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping != nil {
				f9f2f2 := &svcapitypes.PineconeFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField != nil {
					f9f2f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField != nil {
					f9f2f2.TextField = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField
				}
				f9f2.FieldMapping = f9f2f2
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.Namespace != nil {
				f9f2.Namespace = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.Namespace
			}
			f9.PineconeConfiguration = f9f2
		}
		if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration != nil {
			f9f3 := &svcapitypes.RdsConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.CredentialsSecretArn != nil {
				f9f3.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.DatabaseName != nil {
				f9f3.DatabaseName = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.DatabaseName
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping != nil {
				f9f3f2 := &svcapitypes.RdsFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField != nil {
					f9f3f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField != nil {
					f9f3f2.PrimaryKeyField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.TextField != nil {
					f9f3f2.TextField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField != nil {
					f9f3f2.VectorField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField
				}
				f9f3.FieldMapping = f9f3f2
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.ResourceArn != nil {
				f9f3.ResourceARN = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.ResourceArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.TableName != nil {
				f9f3.TableName = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.TableName
			}
			f9.RdsConfiguration = f9f3
		}
		if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration != nil {
			f9f4 := &svcapitypes.RedisEnterpriseCloudConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretArn != nil {
				f9f4.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint != nil {
				f9f4.Endpoint = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping != nil {
				f9f4f2 := &svcapitypes.RedisEnterpriseCloudFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField != nil {
					f9f4f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField != nil {
					f9f4f2.TextField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField != nil {
					f9f4f2.VectorField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField
				}
				f9f4.FieldMapping = f9f4f2
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName != nil {
				f9f4.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName
			}
			f9.RedisEnterpriseCloudConfiguration = f9f4
		}
		if resp.KnowledgeBase.StorageConfiguration.Type != "" {
			f9.Type = aws.String(string(resp.KnowledgeBase.StorageConfiguration.Type))
		}
		ko.Spec.StorageConfiguration = f9
	} else {
		ko.Spec.StorageConfiguration = nil
	}
	if resp.KnowledgeBase.UpdatedAt != nil {
		ko.Status.UpdatedAt = &metav1.Time{*resp.KnowledgeBase.UpdatedAt}
	} else {
		ko.Status.UpdatedAt = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.KnowledgeBaseID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetKnowledgeBaseInput, error) {
	res := &svcsdk.GetKnowledgeBaseInput{}

	if r.ko.Status.KnowledgeBaseID != nil {
		res.KnowledgeBaseId = r.ko.Status.KnowledgeBaseID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateKnowledgeBaseOutput
	_ = resp
	resp, err = rm.sdkapi.CreateKnowledgeBase(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateKnowledgeBase", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.KnowledgeBase.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.KnowledgeBase.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.KnowledgeBase.Description != nil {
		ko.Spec.Description = resp.KnowledgeBase.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.KnowledgeBase.FailureReasons != nil {
		ko.Status.FailureReasons = aws.StringSlice(resp.KnowledgeBase.FailureReasons)
	} else {
		ko.Status.FailureReasons = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.KnowledgeBase.KnowledgeBaseArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.KnowledgeBase.KnowledgeBaseArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.KnowledgeBase.KnowledgeBaseConfiguration != nil {
		f4 := &svcapitypes.KnowledgeBaseConfiguration{}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration != nil {
			f4f0 := &svcapitypes.KendraKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexArn != nil {
				f4f0.KendraIndexARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexArn
			}
			f4.KendraKnowledgeBaseConfiguration = f4f0
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration != nil {
			f4f1 := &svcapitypes.SQLKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration != nil {
				f4f1f0 := &svcapitypes.RedshiftConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration != nil {
					f4f1f0f0 := &svcapitypes.RedshiftQueryEngineConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration != nil {
						f4f1f0f0f0 := &svcapitypes.RedshiftProvisionedConfiguration{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration != nil {
							f4f1f0f0f0f0 := &svcapitypes.RedshiftProvisionedAuthConfiguration{}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser != nil {
								f4f1f0f0f0f0.DatabaseUser = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type != "" {
								f4f1f0f0f0f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type))
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretArn != nil {
								f4f1f0f0f0f0.UsernamePasswordSecretARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretArn
							}
							f4f1f0f0f0.AuthConfiguration = f4f1f0f0f0f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier != nil {
							f4f1f0f0f0.ClusterIdentifier = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier
						}
						f4f1f0f0.ProvisionedConfiguration = f4f1f0f0f0
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration != nil {
						f4f1f0f0f1 := &svcapitypes.RedshiftServerlessConfiguration{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration != nil {
							f4f1f0f0f1f0 := &svcapitypes.RedshiftServerlessAuthConfiguration{}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type != "" {
								f4f1f0f0f1f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type))
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretArn != nil {
								f4f1f0f0f1f0.UsernamePasswordSecretARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretArn
							}
							f4f1f0f0f1.AuthConfiguration = f4f1f0f0f1f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupArn != nil {
							f4f1f0f0f1.WorkgroupARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupArn
						}
						f4f1f0f0.ServerlessConfiguration = f4f1f0f0f1
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type != "" {
						f4f1f0f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type))
					}
					f4f1f0.QueryEngineConfiguration = f4f1f0f0
				}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration != nil {
					f4f1f0f1 := &svcapitypes.QueryGenerationConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds != nil {
						executionTimeoutSecondsCopy := int64(*resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds)
						f4f1f0f1.ExecutionTimeoutSeconds = &executionTimeoutSecondsCopy
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext != nil {
						f4f1f0f1f1 := &svcapitypes.QueryGenerationContext{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries != nil {
							f4f1f0f1f1f0 := []*svcapitypes.CuratedQuery{}
							for _, f4f1f0f1f1f0iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries {
								f4f1f0f1f1f0elem := &svcapitypes.CuratedQuery{}
								if f4f1f0f1f1f0iter.NaturalLanguage != nil {
									f4f1f0f1f1f0elem.NATuralLanguage = f4f1f0f1f1f0iter.NaturalLanguage
								}
								if f4f1f0f1f1f0iter.Sql != nil {
									f4f1f0f1f1f0elem.SQL = f4f1f0f1f1f0iter.Sql
								}
								f4f1f0f1f1f0 = append(f4f1f0f1f1f0, f4f1f0f1f1f0elem)
							}
							f4f1f0f1f1.CuratedQueries = f4f1f0f1f1f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables != nil {
							f4f1f0f1f1f1 := []*svcapitypes.QueryGenerationTable{}
							for _, f4f1f0f1f1f1iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables {
								f4f1f0f1f1f1elem := &svcapitypes.QueryGenerationTable{}
								if f4f1f0f1f1f1iter.Columns != nil {
									f4f1f0f1f1f1elemf0 := []*svcapitypes.QueryGenerationColumn{}
									for _, f4f1f0f1f1f1elemf0iter := range f4f1f0f1f1f1iter.Columns {
										f4f1f0f1f1f1elemf0elem := &svcapitypes.QueryGenerationColumn{}
										if f4f1f0f1f1f1elemf0iter.Description != nil {
											f4f1f0f1f1f1elemf0elem.Description = f4f1f0f1f1f1elemf0iter.Description
										}
										if f4f1f0f1f1f1elemf0iter.Inclusion != "" {
											f4f1f0f1f1f1elemf0elem.Inclusion = aws.String(string(f4f1f0f1f1f1elemf0iter.Inclusion))
										}
										if f4f1f0f1f1f1elemf0iter.Name != nil {
											f4f1f0f1f1f1elemf0elem.Name = f4f1f0f1f1f1elemf0iter.Name
										}
										f4f1f0f1f1f1elemf0 = append(f4f1f0f1f1f1elemf0, f4f1f0f1f1f1elemf0elem)
									}
									f4f1f0f1f1f1elem.Columns = f4f1f0f1f1f1elemf0
								}
								if f4f1f0f1f1f1iter.Description != nil {
									f4f1f0f1f1f1elem.Description = f4f1f0f1f1f1iter.Description
								}
								if f4f1f0f1f1f1iter.Inclusion != "" {
									f4f1f0f1f1f1elem.Inclusion = aws.String(string(f4f1f0f1f1f1iter.Inclusion))
								}
								if f4f1f0f1f1f1iter.Name != nil {
									f4f1f0f1f1f1elem.Name = f4f1f0f1f1f1iter.Name
								}
								f4f1f0f1f1f1 = append(f4f1f0f1f1f1, f4f1f0f1f1f1elem)
							}
							f4f1f0f1f1.Tables = f4f1f0f1f1f1
						}
						f4f1f0f1.GenerationContext = f4f1f0f1f1
					}
					f4f1f0.QueryGenerationConfiguration = f4f1f0f1
				}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations != nil {
					f4f1f0f2 := []*svcapitypes.RedshiftQueryEngineStorageConfiguration{}
					for _, f4f1f0f2iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations {
						f4f1f0f2elem := &svcapitypes.RedshiftQueryEngineStorageConfiguration{}
						if f4f1f0f2iter.AwsDataCatalogConfiguration != nil {
							f4f1f0f2elemf0 := &svcapitypes.RedshiftQueryEngineAWSDataCatalogStorageConfiguration{}
							if f4f1f0f2iter.AwsDataCatalogConfiguration.TableNames != nil {
								f4f1f0f2elemf0.TableNames = aws.StringSlice(f4f1f0f2iter.AwsDataCatalogConfiguration.TableNames)
							}
							f4f1f0f2elem.AWSDataCatalogConfiguration = f4f1f0f2elemf0
						}
						if f4f1f0f2iter.RedshiftConfiguration != nil {
							f4f1f0f2elemf1 := &svcapitypes.RedshiftQueryEngineRedshiftStorageConfiguration{}
							if f4f1f0f2iter.RedshiftConfiguration.DatabaseName != nil {
								f4f1f0f2elemf1.DatabaseName = f4f1f0f2iter.RedshiftConfiguration.DatabaseName
							}
							f4f1f0f2elem.RedshiftConfiguration = f4f1f0f2elemf1
						}
						if f4f1f0f2iter.Type != "" {
							f4f1f0f2elem.Type = aws.String(string(f4f1f0f2iter.Type))
						}
						f4f1f0f2 = append(f4f1f0f2, f4f1f0f2elem)
					}
					f4f1f0.StorageConfigurations = f4f1f0f2
				}
				f4f1.RedshiftConfiguration = f4f1f0
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.Type != "" {
				f4f1.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.Type))
			}
			f4.SQLKnowledgeBaseConfiguration = f4f1
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.Type != "" {
			f4.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.Type))
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration != nil {
			f4f3 := &svcapitypes.VectorKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelArn != nil {
				f4f3.EmbeddingModelARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelArn
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration != nil {
				f4f3f1 := &svcapitypes.EmbeddingModelConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration != nil {
					f4f3f1f0 := &svcapitypes.BedrockEmbeddingModelConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions != nil {
						dimensionsCopy := int64(*resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions)
						f4f3f1f0.Dimensions = &dimensionsCopy
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType != "" {
						f4f3f1f0.EmbeddingDataType = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType))
					}
					f4f3f1.BedrockEmbeddingModelConfiguration = f4f3f1f0
				}
				f4f3.EmbeddingModelConfiguration = f4f3f1
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration != nil {
				f4f3f2 := &svcapitypes.SupplementalDataStorageConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations != nil {
					f4f3f2f0 := []*svcapitypes.SupplementalDataStorageLocation{}
					for _, f4f3f2f0iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations {
						f4f3f2f0elem := &svcapitypes.SupplementalDataStorageLocation{}
						if f4f3f2f0iter.S3Location != nil {
							f4f3f2f0elemf0 := &svcapitypes.S3Location{}
							if f4f3f2f0iter.S3Location.Uri != nil {
								f4f3f2f0elemf0.URI = f4f3f2f0iter.S3Location.Uri
							}
							f4f3f2f0elem.S3Location = f4f3f2f0elemf0
						}
						if f4f3f2f0iter.Type != "" {
							f4f3f2f0elem.Type = aws.String(string(f4f3f2f0iter.Type))
						}
						f4f3f2f0 = append(f4f3f2f0, f4f3f2f0elem)
					}
					f4f3f2.StorageLocations = f4f3f2f0
				}
				f4f3.SupplementalDataStorageConfiguration = f4f3f2
			}
			f4.VectorKnowledgeBaseConfiguration = f4f3
		}
		ko.Spec.KnowledgeBaseConfiguration = f4
	} else {
		ko.Spec.KnowledgeBaseConfiguration = nil
	}
	if resp.KnowledgeBase.KnowledgeBaseId != nil {
		ko.Status.KnowledgeBaseID = resp.KnowledgeBase.KnowledgeBaseId
	} else {
		ko.Status.KnowledgeBaseID = nil
	}
	if resp.KnowledgeBase.Name != nil {
		ko.Spec.Name = resp.KnowledgeBase.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.KnowledgeBase.RoleArn != nil {
		ko.Spec.RoleARN = resp.KnowledgeBase.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.KnowledgeBase.Status != "" {
		ko.Status.Status = aws.String(string(resp.KnowledgeBase.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.KnowledgeBase.StorageConfiguration != nil {
		f9 := &svcapitypes.StorageConfiguration{}
		if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration != nil {
			f9f0 := &svcapitypes.MongoDBAtlasConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CollectionName != nil {
				f9f0.CollectionName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CollectionName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CredentialsSecretArn != nil {
				f9f0.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.DatabaseName != nil {
				f9f0.DatabaseName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.DatabaseName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.Endpoint != nil {
				f9f0.Endpoint = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.Endpoint
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.EndpointServiceName != nil {
				f9f0.EndpointServiceName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.EndpointServiceName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping != nil {
				f9f0f5 := &svcapitypes.MongoDBAtlasFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.MetadataField != nil {
					f9f0f5.MetadataField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.TextField != nil {
					f9f0f5.TextField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.VectorField != nil {
					f9f0f5.VectorField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.VectorField
				}
				f9f0.FieldMapping = f9f0f5
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.VectorIndexName != nil {
				f9f0.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.VectorIndexName
			}
			f9.MongoDBAtlasConfiguration = f9f0
		}
		if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration != nil {
			f9f1 := &svcapitypes.OpenSearchServerlessConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.CollectionArn != nil {
				f9f1.CollectionARN = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.CollectionArn
			}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping != nil {
				f9f1f1 := &svcapitypes.OpenSearchServerlessFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField != nil {
					f9f1f1.MetadataField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField != nil {
					f9f1f1.TextField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField != nil {
					f9f1f1.VectorField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField
				}
				f9f1.FieldMapping = f9f1f1
			}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName != nil {
				f9f1.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName
			}
			f9.OpensearchServerlessConfiguration = f9f1
		}
		if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration != nil {
			f9f2 := &svcapitypes.PineconeConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.ConnectionString != nil {
				f9f2.ConnectionString = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.ConnectionString
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.CredentialsSecretArn != nil {
				f9f2.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping != nil {
				f9f2f2 := &svcapitypes.PineconeFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField != nil {
					f9f2f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField != nil {
					f9f2f2.TextField = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField
				}
				f9f2.FieldMapping = f9f2f2
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.Namespace != nil {
				f9f2.Namespace = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.Namespace
			}
			f9.PineconeConfiguration = f9f2
		}
		if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration != nil {
			f9f3 := &svcapitypes.RdsConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.CredentialsSecretArn != nil {
				f9f3.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.DatabaseName != nil {
				f9f3.DatabaseName = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.DatabaseName
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping != nil {
				f9f3f2 := &svcapitypes.RdsFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField != nil {
					f9f3f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField != nil {
					f9f3f2.PrimaryKeyField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.TextField != nil {
					f9f3f2.TextField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField != nil {
					f9f3f2.VectorField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField
				}
				f9f3.FieldMapping = f9f3f2
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.ResourceArn != nil {
				f9f3.ResourceARN = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.ResourceArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.TableName != nil {
				f9f3.TableName = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.TableName
			}
			f9.RdsConfiguration = f9f3
		}
		if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration != nil {
			f9f4 := &svcapitypes.RedisEnterpriseCloudConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretArn != nil {
				f9f4.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint != nil {
				f9f4.Endpoint = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping != nil {
				f9f4f2 := &svcapitypes.RedisEnterpriseCloudFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField != nil {
					f9f4f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField != nil {
					f9f4f2.TextField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField != nil {
					f9f4f2.VectorField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField
				}
				f9f4.FieldMapping = f9f4f2
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName != nil {
				f9f4.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName
			}
			f9.RedisEnterpriseCloudConfiguration = f9f4
		}
		if resp.KnowledgeBase.StorageConfiguration.Type != "" {
			f9.Type = aws.String(string(resp.KnowledgeBase.StorageConfiguration.Type))
		}
		ko.Spec.StorageConfiguration = f9
	} else {
		ko.Spec.StorageConfiguration = nil
	}
	if resp.KnowledgeBase.UpdatedAt != nil {
		ko.Status.UpdatedAt = &metav1.Time{*resp.KnowledgeBase.UpdatedAt}
	} else {
		ko.Status.UpdatedAt = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateKnowledgeBaseInput, error) {
	res := &svcsdk.CreateKnowledgeBaseInput{}

	if r.ko.Spec.ClientToken != nil {
		res.ClientToken = r.ko.Spec.ClientToken
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.KnowledgeBaseConfiguration != nil {
		f2 := &svcsdktypes.KnowledgeBaseConfiguration{}
		if r.ko.Spec.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration != nil {
			f2f0 := &svcsdktypes.KendraKnowledgeBaseConfiguration{}
			if r.ko.Spec.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexARN != nil {
				f2f0.KendraIndexArn = r.ko.Spec.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexARN
			}
			f2.KendraKnowledgeBaseConfiguration = f2f0
		}
		if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration != nil {
			f2f1 := &svcsdktypes.SqlKnowledgeBaseConfiguration{}
			if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration != nil {
				f2f1f0 := &svcsdktypes.RedshiftConfiguration{}
				if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration != nil {
					f2f1f0f0 := &svcsdktypes.RedshiftQueryEngineConfiguration{}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration != nil {
						f2f1f0f0f0 := &svcsdktypes.RedshiftProvisionedConfiguration{}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration != nil {
							f2f1f0f0f0f0 := &svcsdktypes.RedshiftProvisionedAuthConfiguration{}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser != nil {
								f2f1f0f0f0f0.DatabaseUser = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser
							}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type != nil {
								f2f1f0f0f0f0.Type = svcsdktypes.RedshiftProvisionedAuthType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type)
							}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretARN != nil {
								f2f1f0f0f0f0.UsernamePasswordSecretArn = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretARN
							}
							f2f1f0f0f0.AuthConfiguration = f2f1f0f0f0f0
						}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier != nil {
							f2f1f0f0f0.ClusterIdentifier = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier
						}
						f2f1f0f0.ProvisionedConfiguration = f2f1f0f0f0
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration != nil {
						f2f1f0f0f1 := &svcsdktypes.RedshiftServerlessConfiguration{}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration != nil {
							f2f1f0f0f1f0 := &svcsdktypes.RedshiftServerlessAuthConfiguration{}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type != nil {
								f2f1f0f0f1f0.Type = svcsdktypes.RedshiftServerlessAuthType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type)
							}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretARN != nil {
								f2f1f0f0f1f0.UsernamePasswordSecretArn = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretARN
							}
							f2f1f0f0f1.AuthConfiguration = f2f1f0f0f1f0
						}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupARN != nil {
							f2f1f0f0f1.WorkgroupArn = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupARN
						}
						f2f1f0f0.ServerlessConfiguration = f2f1f0f0f1
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type != nil {
						f2f1f0f0.Type = svcsdktypes.RedshiftQueryEngineType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type)
					}
					f2f1f0.QueryEngineConfiguration = f2f1f0f0
				}
				if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration != nil {
					f2f1f0f1 := &svcsdktypes.QueryGenerationConfiguration{}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds != nil {
						executionTimeoutSecondsCopy0 := *r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds
						if executionTimeoutSecondsCopy0 > math.MaxInt32 || executionTimeoutSecondsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field executionTimeoutSeconds is of type int32")
						}
						executionTimeoutSecondsCopy := int32(executionTimeoutSecondsCopy0)
						f2f1f0f1.ExecutionTimeoutSeconds = &executionTimeoutSecondsCopy
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext != nil {
						f2f1f0f1f1 := &svcsdktypes.QueryGenerationContext{}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries != nil {
							f2f1f0f1f1f0 := []svcsdktypes.CuratedQuery{}
							for _, f2f1f0f1f1f0iter := range r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries {
								f2f1f0f1f1f0elem := &svcsdktypes.CuratedQuery{}
								if f2f1f0f1f1f0iter.NATuralLanguage != nil {
									f2f1f0f1f1f0elem.NaturalLanguage = f2f1f0f1f1f0iter.NATuralLanguage
								}
								if f2f1f0f1f1f0iter.SQL != nil {
									f2f1f0f1f1f0elem.Sql = f2f1f0f1f1f0iter.SQL
								}
								f2f1f0f1f1f0 = append(f2f1f0f1f1f0, *f2f1f0f1f1f0elem)
							}
							f2f1f0f1f1.CuratedQueries = f2f1f0f1f1f0
						}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables != nil {
							f2f1f0f1f1f1 := []svcsdktypes.QueryGenerationTable{}
							for _, f2f1f0f1f1f1iter := range r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables {
								f2f1f0f1f1f1elem := &svcsdktypes.QueryGenerationTable{}
								if f2f1f0f1f1f1iter.Columns != nil {
									f2f1f0f1f1f1elemf0 := []svcsdktypes.QueryGenerationColumn{}
									for _, f2f1f0f1f1f1elemf0iter := range f2f1f0f1f1f1iter.Columns {
										f2f1f0f1f1f1elemf0elem := &svcsdktypes.QueryGenerationColumn{}
										if f2f1f0f1f1f1elemf0iter.Description != nil {
											f2f1f0f1f1f1elemf0elem.Description = f2f1f0f1f1f1elemf0iter.Description
										}
										if f2f1f0f1f1f1elemf0iter.Inclusion != nil {
											f2f1f0f1f1f1elemf0elem.Inclusion = svcsdktypes.IncludeExclude(*f2f1f0f1f1f1elemf0iter.Inclusion)
										}
										if f2f1f0f1f1f1elemf0iter.Name != nil {
											f2f1f0f1f1f1elemf0elem.Name = f2f1f0f1f1f1elemf0iter.Name
										}
										f2f1f0f1f1f1elemf0 = append(f2f1f0f1f1f1elemf0, *f2f1f0f1f1f1elemf0elem)
									}
									f2f1f0f1f1f1elem.Columns = f2f1f0f1f1f1elemf0
								}
								if f2f1f0f1f1f1iter.Description != nil {
									f2f1f0f1f1f1elem.Description = f2f1f0f1f1f1iter.Description
								}
								if f2f1f0f1f1f1iter.Inclusion != nil {
									f2f1f0f1f1f1elem.Inclusion = svcsdktypes.IncludeExclude(*f2f1f0f1f1f1iter.Inclusion)
								}
								if f2f1f0f1f1f1iter.Name != nil {
									f2f1f0f1f1f1elem.Name = f2f1f0f1f1f1iter.Name
								}
								f2f1f0f1f1f1 = append(f2f1f0f1f1f1, *f2f1f0f1f1f1elem)
							}
							f2f1f0f1f1.Tables = f2f1f0f1f1f1
						}
						f2f1f0f1.GenerationContext = f2f1f0f1f1
					}
					f2f1f0.QueryGenerationConfiguration = f2f1f0f1
				}
				if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations != nil {
					f2f1f0f2 := []svcsdktypes.RedshiftQueryEngineStorageConfiguration{}
					for _, f2f1f0f2iter := range r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations {
						f2f1f0f2elem := &svcsdktypes.RedshiftQueryEngineStorageConfiguration{}
						if f2f1f0f2iter.AWSDataCatalogConfiguration != nil {
							f2f1f0f2elemf0 := &svcsdktypes.RedshiftQueryEngineAwsDataCatalogStorageConfiguration{}
							if f2f1f0f2iter.AWSDataCatalogConfiguration.TableNames != nil {
								f2f1f0f2elemf0.TableNames = aws.ToStringSlice(f2f1f0f2iter.AWSDataCatalogConfiguration.TableNames)
							}
							f2f1f0f2elem.AwsDataCatalogConfiguration = f2f1f0f2elemf0
						}
						if f2f1f0f2iter.RedshiftConfiguration != nil {
							f2f1f0f2elemf1 := &svcsdktypes.RedshiftQueryEngineRedshiftStorageConfiguration{}
							if f2f1f0f2iter.RedshiftConfiguration.DatabaseName != nil {
								f2f1f0f2elemf1.DatabaseName = f2f1f0f2iter.RedshiftConfiguration.DatabaseName
							}
							f2f1f0f2elem.RedshiftConfiguration = f2f1f0f2elemf1
						}
						if f2f1f0f2iter.Type != nil {
							f2f1f0f2elem.Type = svcsdktypes.RedshiftQueryEngineStorageType(*f2f1f0f2iter.Type)
						}
						f2f1f0f2 = append(f2f1f0f2, *f2f1f0f2elem)
					}
					f2f1f0.StorageConfigurations = f2f1f0f2
				}
				f2f1.RedshiftConfiguration = f2f1f0
			}
			if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.Type != nil {
				f2f1.Type = svcsdktypes.QueryEngineType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.Type)
			}
			f2.SqlKnowledgeBaseConfiguration = f2f1
		}
		if r.ko.Spec.KnowledgeBaseConfiguration.Type != nil {
			f2.Type = svcsdktypes.KnowledgeBaseType(*r.ko.Spec.KnowledgeBaseConfiguration.Type)
		}
		if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration != nil {
			f2f3 := &svcsdktypes.VectorKnowledgeBaseConfiguration{}
			if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelARN != nil {
				f2f3.EmbeddingModelArn = r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelARN
			}
			if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration != nil {
				f2f3f1 := &svcsdktypes.EmbeddingModelConfiguration{}
				if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration != nil {
					f2f3f1f0 := &svcsdktypes.BedrockEmbeddingModelConfiguration{}
					if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions != nil {
						dimensionsCopy0 := *r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions
						if dimensionsCopy0 > math.MaxInt32 || dimensionsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field dimensions is of type int32")
						}
						dimensionsCopy := int32(dimensionsCopy0)
						f2f3f1f0.Dimensions = &dimensionsCopy
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType != nil {
						f2f3f1f0.EmbeddingDataType = svcsdktypes.EmbeddingDataType(*r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType)
					}
					f2f3f1.BedrockEmbeddingModelConfiguration = f2f3f1f0
				}
				f2f3.EmbeddingModelConfiguration = f2f3f1
			}
			if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration != nil {
				f2f3f2 := &svcsdktypes.SupplementalDataStorageConfiguration{}
				if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations != nil {
					f2f3f2f0 := []svcsdktypes.SupplementalDataStorageLocation{}
					for _, f2f3f2f0iter := range r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations {
						f2f3f2f0elem := &svcsdktypes.SupplementalDataStorageLocation{}
						if f2f3f2f0iter.S3Location != nil {
							f2f3f2f0elemf0 := &svcsdktypes.S3Location{}
							if f2f3f2f0iter.S3Location.URI != nil {
								f2f3f2f0elemf0.Uri = f2f3f2f0iter.S3Location.URI
							}
							f2f3f2f0elem.S3Location = f2f3f2f0elemf0
						}
						if f2f3f2f0iter.Type != nil {
							f2f3f2f0elem.Type = svcsdktypes.SupplementalDataStorageLocationType(*f2f3f2f0iter.Type)
						}
						f2f3f2f0 = append(f2f3f2f0, *f2f3f2f0elem)
					}
					f2f3f2.StorageLocations = f2f3f2f0
				}
				f2f3.SupplementalDataStorageConfiguration = f2f3f2
			}
			f2.VectorKnowledgeBaseConfiguration = f2f3
		}
		res.KnowledgeBaseConfiguration = f2
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.StorageConfiguration != nil {
		f5 := &svcsdktypes.StorageConfiguration{}
		if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration != nil {
			f5f0 := &svcsdktypes.MongoDbAtlasConfiguration{}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CollectionName != nil {
				f5f0.CollectionName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CollectionName
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CredentialsSecretARN != nil {
				f5f0.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.DatabaseName != nil {
				f5f0.DatabaseName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.DatabaseName
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.Endpoint != nil {
				f5f0.Endpoint = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.Endpoint
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.EndpointServiceName != nil {
				f5f0.EndpointServiceName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.EndpointServiceName
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping != nil {
				f5f0f5 := &svcsdktypes.MongoDbAtlasFieldMapping{}
				if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.MetadataField != nil {
					f5f0f5.MetadataField = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.TextField != nil {
					f5f0f5.TextField = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.VectorField != nil {
					f5f0f5.VectorField = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.VectorField
				}
				f5f0.FieldMapping = f5f0f5
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.VectorIndexName != nil {
				f5f0.VectorIndexName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.VectorIndexName
			}
			f5.MongoDbAtlasConfiguration = f5f0
		}
		if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration != nil {
			f5f1 := &svcsdktypes.OpenSearchServerlessConfiguration{}
			if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.CollectionARN != nil {
				f5f1.CollectionArn = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.CollectionARN
			}
			if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping != nil {
				f5f1f1 := &svcsdktypes.OpenSearchServerlessFieldMapping{}
				if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField != nil {
					f5f1f1.MetadataField = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField != nil {
					f5f1f1.TextField = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField != nil {
					f5f1f1.VectorField = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField
				}
				f5f1.FieldMapping = f5f1f1
			}
			if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName != nil {
				f5f1.VectorIndexName = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName
			}
			f5.OpensearchServerlessConfiguration = f5f1
		}
		if r.ko.Spec.StorageConfiguration.PineconeConfiguration != nil {
			f5f2 := &svcsdktypes.PineconeConfiguration{}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.ConnectionString != nil {
				f5f2.ConnectionString = r.ko.Spec.StorageConfiguration.PineconeConfiguration.ConnectionString
			}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.CredentialsSecretARN != nil {
				f5f2.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.PineconeConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping != nil {
				f5f2f2 := &svcsdktypes.PineconeFieldMapping{}
				if r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField != nil {
					f5f2f2.MetadataField = r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField != nil {
					f5f2f2.TextField = r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField
				}
				f5f2.FieldMapping = f5f2f2
			}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.Namespace != nil {
				f5f2.Namespace = r.ko.Spec.StorageConfiguration.PineconeConfiguration.Namespace
			}
			f5.PineconeConfiguration = f5f2
		}
		if r.ko.Spec.StorageConfiguration.RdsConfiguration != nil {
			f5f3 := &svcsdktypes.RdsConfiguration{}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.CredentialsSecretARN != nil {
				f5f3.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.RdsConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.DatabaseName != nil {
				f5f3.DatabaseName = r.ko.Spec.StorageConfiguration.RdsConfiguration.DatabaseName
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping != nil {
				f5f3f2 := &svcsdktypes.RdsFieldMapping{}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField != nil {
					f5f3f2.MetadataField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField != nil {
					f5f3f2.PrimaryKeyField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField
				}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.TextField != nil {
					f5f3f2.TextField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField != nil {
					f5f3f2.VectorField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField
				}
				f5f3.FieldMapping = f5f3f2
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.ResourceARN != nil {
				f5f3.ResourceArn = r.ko.Spec.StorageConfiguration.RdsConfiguration.ResourceARN
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.TableName != nil {
				f5f3.TableName = r.ko.Spec.StorageConfiguration.RdsConfiguration.TableName
			}
			f5.RdsConfiguration = f5f3
		}
		if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration != nil {
			f5f4 := &svcsdktypes.RedisEnterpriseCloudConfiguration{}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretARN != nil {
				f5f4.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint != nil {
				f5f4.Endpoint = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint
			}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping != nil {
				f5f4f2 := &svcsdktypes.RedisEnterpriseCloudFieldMapping{}
				if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField != nil {
					f5f4f2.MetadataField = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField != nil {
					f5f4f2.TextField = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField != nil {
					f5f4f2.VectorField = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField
				}
				f5f4.FieldMapping = f5f4f2
			}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName != nil {
				f5f4.VectorIndexName = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName
			}
			f5.RedisEnterpriseCloudConfiguration = f5f4
		}
		if r.ko.Spec.StorageConfiguration.Type != nil {
			f5.Type = svcsdktypes.KnowledgeBaseStorageType(*r.ko.Spec.StorageConfiguration.Type)
		}
		res.StorageConfiguration = f5
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateKnowledgeBaseOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateKnowledgeBase(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateKnowledgeBase", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.KnowledgeBase.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.KnowledgeBase.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.KnowledgeBase.Description != nil {
		ko.Spec.Description = resp.KnowledgeBase.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.KnowledgeBase.FailureReasons != nil {
		ko.Status.FailureReasons = aws.StringSlice(resp.KnowledgeBase.FailureReasons)
	} else {
		ko.Status.FailureReasons = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.KnowledgeBase.KnowledgeBaseArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.KnowledgeBase.KnowledgeBaseArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.KnowledgeBase.KnowledgeBaseConfiguration != nil {
		f4 := &svcapitypes.KnowledgeBaseConfiguration{}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration != nil {
			f4f0 := &svcapitypes.KendraKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexArn != nil {
				f4f0.KendraIndexARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexArn
			}
			f4.KendraKnowledgeBaseConfiguration = f4f0
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration != nil {
			f4f1 := &svcapitypes.SQLKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration != nil {
				f4f1f0 := &svcapitypes.RedshiftConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration != nil {
					f4f1f0f0 := &svcapitypes.RedshiftQueryEngineConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration != nil {
						f4f1f0f0f0 := &svcapitypes.RedshiftProvisionedConfiguration{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration != nil {
							f4f1f0f0f0f0 := &svcapitypes.RedshiftProvisionedAuthConfiguration{}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser != nil {
								f4f1f0f0f0f0.DatabaseUser = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type != "" {
								f4f1f0f0f0f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type))
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretArn != nil {
								f4f1f0f0f0f0.UsernamePasswordSecretARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretArn
							}
							f4f1f0f0f0.AuthConfiguration = f4f1f0f0f0f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier != nil {
							f4f1f0f0f0.ClusterIdentifier = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier
						}
						f4f1f0f0.ProvisionedConfiguration = f4f1f0f0f0
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration != nil {
						f4f1f0f0f1 := &svcapitypes.RedshiftServerlessConfiguration{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration != nil {
							f4f1f0f0f1f0 := &svcapitypes.RedshiftServerlessAuthConfiguration{}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type != "" {
								f4f1f0f0f1f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type))
							}
							if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretArn != nil {
								f4f1f0f0f1f0.UsernamePasswordSecretARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretArn
							}
							f4f1f0f0f1.AuthConfiguration = f4f1f0f0f1f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupArn != nil {
							f4f1f0f0f1.WorkgroupARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupArn
						}
						f4f1f0f0.ServerlessConfiguration = f4f1f0f0f1
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type != "" {
						f4f1f0f0.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type))
					}
					f4f1f0.QueryEngineConfiguration = f4f1f0f0
				}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration != nil {
					f4f1f0f1 := &svcapitypes.QueryGenerationConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds != nil {
						executionTimeoutSecondsCopy := int64(*resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds)
						f4f1f0f1.ExecutionTimeoutSeconds = &executionTimeoutSecondsCopy
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext != nil {
						f4f1f0f1f1 := &svcapitypes.QueryGenerationContext{}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries != nil {
							f4f1f0f1f1f0 := []*svcapitypes.CuratedQuery{}
							for _, f4f1f0f1f1f0iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries {
								f4f1f0f1f1f0elem := &svcapitypes.CuratedQuery{}
								if f4f1f0f1f1f0iter.NaturalLanguage != nil {
									f4f1f0f1f1f0elem.NATuralLanguage = f4f1f0f1f1f0iter.NaturalLanguage
								}
								if f4f1f0f1f1f0iter.Sql != nil {
									f4f1f0f1f1f0elem.SQL = f4f1f0f1f1f0iter.Sql
								}
								f4f1f0f1f1f0 = append(f4f1f0f1f1f0, f4f1f0f1f1f0elem)
							}
							f4f1f0f1f1.CuratedQueries = f4f1f0f1f1f0
						}
						if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables != nil {
							f4f1f0f1f1f1 := []*svcapitypes.QueryGenerationTable{}
							for _, f4f1f0f1f1f1iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables {
								f4f1f0f1f1f1elem := &svcapitypes.QueryGenerationTable{}
								if f4f1f0f1f1f1iter.Columns != nil {
									f4f1f0f1f1f1elemf0 := []*svcapitypes.QueryGenerationColumn{}
									for _, f4f1f0f1f1f1elemf0iter := range f4f1f0f1f1f1iter.Columns {
										f4f1f0f1f1f1elemf0elem := &svcapitypes.QueryGenerationColumn{}
										if f4f1f0f1f1f1elemf0iter.Description != nil {
											f4f1f0f1f1f1elemf0elem.Description = f4f1f0f1f1f1elemf0iter.Description
										}
										if f4f1f0f1f1f1elemf0iter.Inclusion != "" {
											f4f1f0f1f1f1elemf0elem.Inclusion = aws.String(string(f4f1f0f1f1f1elemf0iter.Inclusion))
										}
										if f4f1f0f1f1f1elemf0iter.Name != nil {
											f4f1f0f1f1f1elemf0elem.Name = f4f1f0f1f1f1elemf0iter.Name
										}
										f4f1f0f1f1f1elemf0 = append(f4f1f0f1f1f1elemf0, f4f1f0f1f1f1elemf0elem)
									}
									f4f1f0f1f1f1elem.Columns = f4f1f0f1f1f1elemf0
								}
								if f4f1f0f1f1f1iter.Description != nil {
									f4f1f0f1f1f1elem.Description = f4f1f0f1f1f1iter.Description
								}
								if f4f1f0f1f1f1iter.Inclusion != "" {
									f4f1f0f1f1f1elem.Inclusion = aws.String(string(f4f1f0f1f1f1iter.Inclusion))
								}
								if f4f1f0f1f1f1iter.Name != nil {
									f4f1f0f1f1f1elem.Name = f4f1f0f1f1f1iter.Name
								}
								f4f1f0f1f1f1 = append(f4f1f0f1f1f1, f4f1f0f1f1f1elem)
							}
							f4f1f0f1f1.Tables = f4f1f0f1f1f1
						}
						f4f1f0f1.GenerationContext = f4f1f0f1f1
					}
					f4f1f0.QueryGenerationConfiguration = f4f1f0f1
				}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations != nil {
					f4f1f0f2 := []*svcapitypes.RedshiftQueryEngineStorageConfiguration{}
					for _, f4f1f0f2iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations {
						f4f1f0f2elem := &svcapitypes.RedshiftQueryEngineStorageConfiguration{}
						if f4f1f0f2iter.AwsDataCatalogConfiguration != nil {
							f4f1f0f2elemf0 := &svcapitypes.RedshiftQueryEngineAWSDataCatalogStorageConfiguration{}
							if f4f1f0f2iter.AwsDataCatalogConfiguration.TableNames != nil {
								f4f1f0f2elemf0.TableNames = aws.StringSlice(f4f1f0f2iter.AwsDataCatalogConfiguration.TableNames)
							}
							f4f1f0f2elem.AWSDataCatalogConfiguration = f4f1f0f2elemf0
						}
						if f4f1f0f2iter.RedshiftConfiguration != nil {
							f4f1f0f2elemf1 := &svcapitypes.RedshiftQueryEngineRedshiftStorageConfiguration{}
							if f4f1f0f2iter.RedshiftConfiguration.DatabaseName != nil {
								f4f1f0f2elemf1.DatabaseName = f4f1f0f2iter.RedshiftConfiguration.DatabaseName
							}
							f4f1f0f2elem.RedshiftConfiguration = f4f1f0f2elemf1
						}
						if f4f1f0f2iter.Type != "" {
							f4f1f0f2elem.Type = aws.String(string(f4f1f0f2iter.Type))
						}
						f4f1f0f2 = append(f4f1f0f2, f4f1f0f2elem)
					}
					f4f1f0.StorageConfigurations = f4f1f0f2
				}
				f4f1.RedshiftConfiguration = f4f1f0
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.Type != "" {
				f4f1.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.SqlKnowledgeBaseConfiguration.Type))
			}
			f4.SQLKnowledgeBaseConfiguration = f4f1
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.Type != "" {
			f4.Type = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.Type))
		}
		if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration != nil {
			f4f3 := &svcapitypes.VectorKnowledgeBaseConfiguration{}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelArn != nil {
				f4f3.EmbeddingModelARN = resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelArn
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration != nil {
				f4f3f1 := &svcapitypes.EmbeddingModelConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration != nil {
					f4f3f1f0 := &svcapitypes.BedrockEmbeddingModelConfiguration{}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions != nil {
						dimensionsCopy := int64(*resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions)
						f4f3f1f0.Dimensions = &dimensionsCopy
					}
					if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType != "" {
						f4f3f1f0.EmbeddingDataType = aws.String(string(resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType))
					}
					f4f3f1.BedrockEmbeddingModelConfiguration = f4f3f1f0
				}
				f4f3.EmbeddingModelConfiguration = f4f3f1
			}
			if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration != nil {
				f4f3f2 := &svcapitypes.SupplementalDataStorageConfiguration{}
				if resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations != nil {
					f4f3f2f0 := []*svcapitypes.SupplementalDataStorageLocation{}
					for _, f4f3f2f0iter := range resp.KnowledgeBase.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations {
						f4f3f2f0elem := &svcapitypes.SupplementalDataStorageLocation{}
						if f4f3f2f0iter.S3Location != nil {
							f4f3f2f0elemf0 := &svcapitypes.S3Location{}
							if f4f3f2f0iter.S3Location.Uri != nil {
								f4f3f2f0elemf0.URI = f4f3f2f0iter.S3Location.Uri
							}
							f4f3f2f0elem.S3Location = f4f3f2f0elemf0
						}
						if f4f3f2f0iter.Type != "" {
							f4f3f2f0elem.Type = aws.String(string(f4f3f2f0iter.Type))
						}
						f4f3f2f0 = append(f4f3f2f0, f4f3f2f0elem)
					}
					f4f3f2.StorageLocations = f4f3f2f0
				}
				f4f3.SupplementalDataStorageConfiguration = f4f3f2
			}
			f4.VectorKnowledgeBaseConfiguration = f4f3
		}
		ko.Spec.KnowledgeBaseConfiguration = f4
	} else {
		ko.Spec.KnowledgeBaseConfiguration = nil
	}
	if resp.KnowledgeBase.KnowledgeBaseId != nil {
		ko.Status.KnowledgeBaseID = resp.KnowledgeBase.KnowledgeBaseId
	} else {
		ko.Status.KnowledgeBaseID = nil
	}
	if resp.KnowledgeBase.Name != nil {
		ko.Spec.Name = resp.KnowledgeBase.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.KnowledgeBase.RoleArn != nil {
		ko.Spec.RoleARN = resp.KnowledgeBase.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.KnowledgeBase.Status != "" {
		ko.Status.Status = aws.String(string(resp.KnowledgeBase.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.KnowledgeBase.StorageConfiguration != nil {
		f9 := &svcapitypes.StorageConfiguration{}
		if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration != nil {
			f9f0 := &svcapitypes.MongoDBAtlasConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CollectionName != nil {
				f9f0.CollectionName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CollectionName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CredentialsSecretArn != nil {
				f9f0.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.DatabaseName != nil {
				f9f0.DatabaseName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.DatabaseName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.Endpoint != nil {
				f9f0.Endpoint = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.Endpoint
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.EndpointServiceName != nil {
				f9f0.EndpointServiceName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.EndpointServiceName
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping != nil {
				f9f0f5 := &svcapitypes.MongoDBAtlasFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.MetadataField != nil {
					f9f0f5.MetadataField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.TextField != nil {
					f9f0f5.TextField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.VectorField != nil {
					f9f0f5.VectorField = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.FieldMapping.VectorField
				}
				f9f0.FieldMapping = f9f0f5
			}
			if resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.VectorIndexName != nil {
				f9f0.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.MongoDbAtlasConfiguration.VectorIndexName
			}
			f9.MongoDBAtlasConfiguration = f9f0
		}
		if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration != nil {
			f9f1 := &svcapitypes.OpenSearchServerlessConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.CollectionArn != nil {
				f9f1.CollectionARN = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.CollectionArn
			}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping != nil {
				f9f1f1 := &svcapitypes.OpenSearchServerlessFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField != nil {
					f9f1f1.MetadataField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField != nil {
					f9f1f1.TextField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField != nil {
					f9f1f1.VectorField = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField
				}
				f9f1.FieldMapping = f9f1f1
			}
			if resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName != nil {
				f9f1.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName
			}
			f9.OpensearchServerlessConfiguration = f9f1
		}
		if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration != nil {
			f9f2 := &svcapitypes.PineconeConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.ConnectionString != nil {
				f9f2.ConnectionString = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.ConnectionString
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.CredentialsSecretArn != nil {
				f9f2.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping != nil {
				f9f2f2 := &svcapitypes.PineconeFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField != nil {
					f9f2f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField != nil {
					f9f2f2.TextField = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField
				}
				f9f2.FieldMapping = f9f2f2
			}
			if resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.Namespace != nil {
				f9f2.Namespace = resp.KnowledgeBase.StorageConfiguration.PineconeConfiguration.Namespace
			}
			f9.PineconeConfiguration = f9f2
		}
		if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration != nil {
			f9f3 := &svcapitypes.RdsConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.CredentialsSecretArn != nil {
				f9f3.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.DatabaseName != nil {
				f9f3.DatabaseName = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.DatabaseName
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping != nil {
				f9f3f2 := &svcapitypes.RdsFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField != nil {
					f9f3f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField != nil {
					f9f3f2.PrimaryKeyField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.TextField != nil {
					f9f3f2.TextField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField != nil {
					f9f3f2.VectorField = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField
				}
				f9f3.FieldMapping = f9f3f2
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.ResourceArn != nil {
				f9f3.ResourceARN = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.ResourceArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.TableName != nil {
				f9f3.TableName = resp.KnowledgeBase.StorageConfiguration.RdsConfiguration.TableName
			}
			f9.RdsConfiguration = f9f3
		}
		if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration != nil {
			f9f4 := &svcapitypes.RedisEnterpriseCloudConfiguration{}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretArn != nil {
				f9f4.CredentialsSecretARN = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretArn
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint != nil {
				f9f4.Endpoint = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping != nil {
				f9f4f2 := &svcapitypes.RedisEnterpriseCloudFieldMapping{}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField != nil {
					f9f4f2.MetadataField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField
				}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField != nil {
					f9f4f2.TextField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField
				}
				if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField != nil {
					f9f4f2.VectorField = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField
				}
				f9f4.FieldMapping = f9f4f2
			}
			if resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName != nil {
				f9f4.VectorIndexName = resp.KnowledgeBase.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName
			}
			f9.RedisEnterpriseCloudConfiguration = f9f4
		}
		if resp.KnowledgeBase.StorageConfiguration.Type != "" {
			f9.Type = aws.String(string(resp.KnowledgeBase.StorageConfiguration.Type))
		}
		ko.Spec.StorageConfiguration = f9
	} else {
		ko.Spec.StorageConfiguration = nil
	}
	if resp.KnowledgeBase.UpdatedAt != nil {
		ko.Status.UpdatedAt = &metav1.Time{*resp.KnowledgeBase.UpdatedAt}
	} else {
		ko.Status.UpdatedAt = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateKnowledgeBaseInput, error) {
	res := &svcsdk.UpdateKnowledgeBaseInput{}

	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.KnowledgeBaseConfiguration != nil {
		f1 := &svcsdktypes.KnowledgeBaseConfiguration{}
		if r.ko.Spec.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration != nil {
			f1f0 := &svcsdktypes.KendraKnowledgeBaseConfiguration{}
			if r.ko.Spec.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexARN != nil {
				f1f0.KendraIndexArn = r.ko.Spec.KnowledgeBaseConfiguration.KendraKnowledgeBaseConfiguration.KendraIndexARN
			}
			f1.KendraKnowledgeBaseConfiguration = f1f0
		}
		if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration != nil {
			f1f1 := &svcsdktypes.SqlKnowledgeBaseConfiguration{}
			if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration != nil {
				f1f1f0 := &svcsdktypes.RedshiftConfiguration{}
				if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration != nil {
					f1f1f0f0 := &svcsdktypes.RedshiftQueryEngineConfiguration{}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration != nil {
						f1f1f0f0f0 := &svcsdktypes.RedshiftProvisionedConfiguration{}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration != nil {
							f1f1f0f0f0f0 := &svcsdktypes.RedshiftProvisionedAuthConfiguration{}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser != nil {
								f1f1f0f0f0f0.DatabaseUser = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.DatabaseUser
							}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type != nil {
								f1f1f0f0f0f0.Type = svcsdktypes.RedshiftProvisionedAuthType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.Type)
							}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretARN != nil {
								f1f1f0f0f0f0.UsernamePasswordSecretArn = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.AuthConfiguration.UsernamePasswordSecretARN
							}
							f1f1f0f0f0.AuthConfiguration = f1f1f0f0f0f0
						}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier != nil {
							f1f1f0f0f0.ClusterIdentifier = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ProvisionedConfiguration.ClusterIdentifier
						}
						f1f1f0f0.ProvisionedConfiguration = f1f1f0f0f0
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration != nil {
						f1f1f0f0f1 := &svcsdktypes.RedshiftServerlessConfiguration{}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration != nil {
							f1f1f0f0f1f0 := &svcsdktypes.RedshiftServerlessAuthConfiguration{}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type != nil {
								f1f1f0f0f1f0.Type = svcsdktypes.RedshiftServerlessAuthType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.Type)
							}
							if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretARN != nil {
								f1f1f0f0f1f0.UsernamePasswordSecretArn = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.AuthConfiguration.UsernamePasswordSecretARN
							}
							f1f1f0f0f1.AuthConfiguration = f1f1f0f0f1f0
						}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupARN != nil {
							f1f1f0f0f1.WorkgroupArn = r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.ServerlessConfiguration.WorkgroupARN
						}
						f1f1f0f0.ServerlessConfiguration = f1f1f0f0f1
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type != nil {
						f1f1f0f0.Type = svcsdktypes.RedshiftQueryEngineType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryEngineConfiguration.Type)
					}
					f1f1f0.QueryEngineConfiguration = f1f1f0f0
				}
				if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration != nil {
					f1f1f0f1 := &svcsdktypes.QueryGenerationConfiguration{}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds != nil {
						executionTimeoutSecondsCopy0 := *r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.ExecutionTimeoutSeconds
						if executionTimeoutSecondsCopy0 > math.MaxInt32 || executionTimeoutSecondsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field executionTimeoutSeconds is of type int32")
						}
						executionTimeoutSecondsCopy := int32(executionTimeoutSecondsCopy0)
						f1f1f0f1.ExecutionTimeoutSeconds = &executionTimeoutSecondsCopy
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext != nil {
						f1f1f0f1f1 := &svcsdktypes.QueryGenerationContext{}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries != nil {
							f1f1f0f1f1f0 := []svcsdktypes.CuratedQuery{}
							for _, f1f1f0f1f1f0iter := range r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.CuratedQueries {
								f1f1f0f1f1f0elem := &svcsdktypes.CuratedQuery{}
								if f1f1f0f1f1f0iter.NATuralLanguage != nil {
									f1f1f0f1f1f0elem.NaturalLanguage = f1f1f0f1f1f0iter.NATuralLanguage
								}
								if f1f1f0f1f1f0iter.SQL != nil {
									f1f1f0f1f1f0elem.Sql = f1f1f0f1f1f0iter.SQL
								}
								f1f1f0f1f1f0 = append(f1f1f0f1f1f0, *f1f1f0f1f1f0elem)
							}
							f1f1f0f1f1.CuratedQueries = f1f1f0f1f1f0
						}
						if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables != nil {
							f1f1f0f1f1f1 := []svcsdktypes.QueryGenerationTable{}
							for _, f1f1f0f1f1f1iter := range r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.QueryGenerationConfiguration.GenerationContext.Tables {
								f1f1f0f1f1f1elem := &svcsdktypes.QueryGenerationTable{}
								if f1f1f0f1f1f1iter.Columns != nil {
									f1f1f0f1f1f1elemf0 := []svcsdktypes.QueryGenerationColumn{}
									for _, f1f1f0f1f1f1elemf0iter := range f1f1f0f1f1f1iter.Columns {
										f1f1f0f1f1f1elemf0elem := &svcsdktypes.QueryGenerationColumn{}
										if f1f1f0f1f1f1elemf0iter.Description != nil {
											f1f1f0f1f1f1elemf0elem.Description = f1f1f0f1f1f1elemf0iter.Description
										}
										if f1f1f0f1f1f1elemf0iter.Inclusion != nil {
											f1f1f0f1f1f1elemf0elem.Inclusion = svcsdktypes.IncludeExclude(*f1f1f0f1f1f1elemf0iter.Inclusion)
										}
										if f1f1f0f1f1f1elemf0iter.Name != nil {
											f1f1f0f1f1f1elemf0elem.Name = f1f1f0f1f1f1elemf0iter.Name
										}
										f1f1f0f1f1f1elemf0 = append(f1f1f0f1f1f1elemf0, *f1f1f0f1f1f1elemf0elem)
									}
									f1f1f0f1f1f1elem.Columns = f1f1f0f1f1f1elemf0
								}
								if f1f1f0f1f1f1iter.Description != nil {
									f1f1f0f1f1f1elem.Description = f1f1f0f1f1f1iter.Description
								}
								if f1f1f0f1f1f1iter.Inclusion != nil {
									f1f1f0f1f1f1elem.Inclusion = svcsdktypes.IncludeExclude(*f1f1f0f1f1f1iter.Inclusion)
								}
								if f1f1f0f1f1f1iter.Name != nil {
									f1f1f0f1f1f1elem.Name = f1f1f0f1f1f1iter.Name
								}
								f1f1f0f1f1f1 = append(f1f1f0f1f1f1, *f1f1f0f1f1f1elem)
							}
							f1f1f0f1f1.Tables = f1f1f0f1f1f1
						}
						f1f1f0f1.GenerationContext = f1f1f0f1f1
					}
					f1f1f0.QueryGenerationConfiguration = f1f1f0f1
				}
				if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations != nil {
					f1f1f0f2 := []svcsdktypes.RedshiftQueryEngineStorageConfiguration{}
					for _, f1f1f0f2iter := range r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.RedshiftConfiguration.StorageConfigurations {
						f1f1f0f2elem := &svcsdktypes.RedshiftQueryEngineStorageConfiguration{}
						if f1f1f0f2iter.AWSDataCatalogConfiguration != nil {
							f1f1f0f2elemf0 := &svcsdktypes.RedshiftQueryEngineAwsDataCatalogStorageConfiguration{}
							if f1f1f0f2iter.AWSDataCatalogConfiguration.TableNames != nil {
								f1f1f0f2elemf0.TableNames = aws.ToStringSlice(f1f1f0f2iter.AWSDataCatalogConfiguration.TableNames)
							}
							f1f1f0f2elem.AwsDataCatalogConfiguration = f1f1f0f2elemf0
						}
						if f1f1f0f2iter.RedshiftConfiguration != nil {
							f1f1f0f2elemf1 := &svcsdktypes.RedshiftQueryEngineRedshiftStorageConfiguration{}
							if f1f1f0f2iter.RedshiftConfiguration.DatabaseName != nil {
								f1f1f0f2elemf1.DatabaseName = f1f1f0f2iter.RedshiftConfiguration.DatabaseName
							}
							f1f1f0f2elem.RedshiftConfiguration = f1f1f0f2elemf1
						}
						if f1f1f0f2iter.Type != nil {
							f1f1f0f2elem.Type = svcsdktypes.RedshiftQueryEngineStorageType(*f1f1f0f2iter.Type)
						}
						f1f1f0f2 = append(f1f1f0f2, *f1f1f0f2elem)
					}
					f1f1f0.StorageConfigurations = f1f1f0f2
				}
				f1f1.RedshiftConfiguration = f1f1f0
			}
			if r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.Type != nil {
				f1f1.Type = svcsdktypes.QueryEngineType(*r.ko.Spec.KnowledgeBaseConfiguration.SQLKnowledgeBaseConfiguration.Type)
			}
			f1.SqlKnowledgeBaseConfiguration = f1f1
		}
		if r.ko.Spec.KnowledgeBaseConfiguration.Type != nil {
			f1.Type = svcsdktypes.KnowledgeBaseType(*r.ko.Spec.KnowledgeBaseConfiguration.Type)
		}
		if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration != nil {
			f1f3 := &svcsdktypes.VectorKnowledgeBaseConfiguration{}
			if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelARN != nil {
				f1f3.EmbeddingModelArn = r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelARN
			}
			if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration != nil {
				f1f3f1 := &svcsdktypes.EmbeddingModelConfiguration{}
				if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration != nil {
					f1f3f1f0 := &svcsdktypes.BedrockEmbeddingModelConfiguration{}
					if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions != nil {
						dimensionsCopy0 := *r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.Dimensions
						if dimensionsCopy0 > math.MaxInt32 || dimensionsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field dimensions is of type int32")
						}
						dimensionsCopy := int32(dimensionsCopy0)
						f1f3f1f0.Dimensions = &dimensionsCopy
					}
					if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType != nil {
						f1f3f1f0.EmbeddingDataType = svcsdktypes.EmbeddingDataType(*r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.EmbeddingModelConfiguration.BedrockEmbeddingModelConfiguration.EmbeddingDataType)
					}
					f1f3f1.BedrockEmbeddingModelConfiguration = f1f3f1f0
				}
				f1f3.EmbeddingModelConfiguration = f1f3f1
			}
			if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration != nil {
				f1f3f2 := &svcsdktypes.SupplementalDataStorageConfiguration{}
				if r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations != nil {
					f1f3f2f0 := []svcsdktypes.SupplementalDataStorageLocation{}
					for _, f1f3f2f0iter := range r.ko.Spec.KnowledgeBaseConfiguration.VectorKnowledgeBaseConfiguration.SupplementalDataStorageConfiguration.StorageLocations {
						f1f3f2f0elem := &svcsdktypes.SupplementalDataStorageLocation{}
						if f1f3f2f0iter.S3Location != nil {
							f1f3f2f0elemf0 := &svcsdktypes.S3Location{}
							if f1f3f2f0iter.S3Location.URI != nil {
								f1f3f2f0elemf0.Uri = f1f3f2f0iter.S3Location.URI
							}
							f1f3f2f0elem.S3Location = f1f3f2f0elemf0
						}
						if f1f3f2f0iter.Type != nil {
							f1f3f2f0elem.Type = svcsdktypes.SupplementalDataStorageLocationType(*f1f3f2f0iter.Type)
						}
						f1f3f2f0 = append(f1f3f2f0, *f1f3f2f0elem)
					}
					f1f3f2.StorageLocations = f1f3f2f0
				}
				f1f3.SupplementalDataStorageConfiguration = f1f3f2
			}
			f1.VectorKnowledgeBaseConfiguration = f1f3
		}
		res.KnowledgeBaseConfiguration = f1
	}
	if r.ko.Status.KnowledgeBaseID != nil {
		res.KnowledgeBaseId = r.ko.Status.KnowledgeBaseID
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.StorageConfiguration != nil {
		f5 := &svcsdktypes.StorageConfiguration{}
		if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration != nil {
			f5f0 := &svcsdktypes.MongoDbAtlasConfiguration{}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CollectionName != nil {
				f5f0.CollectionName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CollectionName
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CredentialsSecretARN != nil {
				f5f0.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.DatabaseName != nil {
				f5f0.DatabaseName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.DatabaseName
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.Endpoint != nil {
				f5f0.Endpoint = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.Endpoint
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.EndpointServiceName != nil {
				f5f0.EndpointServiceName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.EndpointServiceName
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping != nil {
				f5f0f5 := &svcsdktypes.MongoDbAtlasFieldMapping{}
				if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.MetadataField != nil {
					f5f0f5.MetadataField = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.TextField != nil {
					f5f0f5.TextField = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.VectorField != nil {
					f5f0f5.VectorField = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.FieldMapping.VectorField
				}
				f5f0.FieldMapping = f5f0f5
			}
			if r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.VectorIndexName != nil {
				f5f0.VectorIndexName = r.ko.Spec.StorageConfiguration.MongoDBAtlasConfiguration.VectorIndexName
			}
			f5.MongoDbAtlasConfiguration = f5f0
		}
		if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration != nil {
			f5f1 := &svcsdktypes.OpenSearchServerlessConfiguration{}
			if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.CollectionARN != nil {
				f5f1.CollectionArn = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.CollectionARN
			}
			if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping != nil {
				f5f1f1 := &svcsdktypes.OpenSearchServerlessFieldMapping{}
				if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField != nil {
					f5f1f1.MetadataField = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField != nil {
					f5f1f1.TextField = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField != nil {
					f5f1f1.VectorField = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.FieldMapping.VectorField
				}
				f5f1.FieldMapping = f5f1f1
			}
			if r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName != nil {
				f5f1.VectorIndexName = r.ko.Spec.StorageConfiguration.OpensearchServerlessConfiguration.VectorIndexName
			}
			f5.OpensearchServerlessConfiguration = f5f1
		}
		if r.ko.Spec.StorageConfiguration.PineconeConfiguration != nil {
			f5f2 := &svcsdktypes.PineconeConfiguration{}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.ConnectionString != nil {
				f5f2.ConnectionString = r.ko.Spec.StorageConfiguration.PineconeConfiguration.ConnectionString
			}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.CredentialsSecretARN != nil {
				f5f2.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.PineconeConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping != nil {
				f5f2f2 := &svcsdktypes.PineconeFieldMapping{}
				if r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField != nil {
					f5f2f2.MetadataField = r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField != nil {
					f5f2f2.TextField = r.ko.Spec.StorageConfiguration.PineconeConfiguration.FieldMapping.TextField
				}
				f5f2.FieldMapping = f5f2f2
			}
			if r.ko.Spec.StorageConfiguration.PineconeConfiguration.Namespace != nil {
				f5f2.Namespace = r.ko.Spec.StorageConfiguration.PineconeConfiguration.Namespace
			}
			f5.PineconeConfiguration = f5f2
		}
		if r.ko.Spec.StorageConfiguration.RdsConfiguration != nil {
			f5f3 := &svcsdktypes.RdsConfiguration{}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.CredentialsSecretARN != nil {
				f5f3.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.RdsConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.DatabaseName != nil {
				f5f3.DatabaseName = r.ko.Spec.StorageConfiguration.RdsConfiguration.DatabaseName
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping != nil {
				f5f3f2 := &svcsdktypes.RdsFieldMapping{}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField != nil {
					f5f3f2.MetadataField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField != nil {
					f5f3f2.PrimaryKeyField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.PrimaryKeyField
				}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.TextField != nil {
					f5f3f2.TextField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField != nil {
					f5f3f2.VectorField = r.ko.Spec.StorageConfiguration.RdsConfiguration.FieldMapping.VectorField
				}
				f5f3.FieldMapping = f5f3f2
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.ResourceARN != nil {
				f5f3.ResourceArn = r.ko.Spec.StorageConfiguration.RdsConfiguration.ResourceARN
			}
			if r.ko.Spec.StorageConfiguration.RdsConfiguration.TableName != nil {
				f5f3.TableName = r.ko.Spec.StorageConfiguration.RdsConfiguration.TableName
			}
			f5.RdsConfiguration = f5f3
		}
		if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration != nil {
			f5f4 := &svcsdktypes.RedisEnterpriseCloudConfiguration{}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretARN != nil {
				f5f4.CredentialsSecretArn = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.CredentialsSecretARN
			}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint != nil {
				f5f4.Endpoint = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.Endpoint
			}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping != nil {
				f5f4f2 := &svcsdktypes.RedisEnterpriseCloudFieldMapping{}
				if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField != nil {
					f5f4f2.MetadataField = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.MetadataField
				}
				if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField != nil {
					f5f4f2.TextField = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.TextField
				}
				if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField != nil {
					f5f4f2.VectorField = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.FieldMapping.VectorField
				}
				f5f4.FieldMapping = f5f4f2
			}
			if r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName != nil {
				f5f4.VectorIndexName = r.ko.Spec.StorageConfiguration.RedisEnterpriseCloudConfiguration.VectorIndexName
			}
			f5.RedisEnterpriseCloudConfiguration = f5f4
		}
		if r.ko.Spec.StorageConfiguration.Type != nil {
			f5.Type = svcsdktypes.KnowledgeBaseStorageType(*r.ko.Spec.StorageConfiguration.Type)
		}
		res.StorageConfiguration = f5
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteKnowledgeBaseOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteKnowledgeBase(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteKnowledgeBase", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteKnowledgeBaseInput, error) {
	res := &svcsdk.DeleteKnowledgeBaseInput{}

	if r.ko.Status.KnowledgeBaseID != nil {
		res.KnowledgeBaseId = r.ko.Status.KnowledgeBaseID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.KnowledgeBase,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ResourceNotFoundException",
		"ConflictException":
		return true
	default:
		return false
	}
}
